Android框架 MCV MVP MVVM

MVC：平时我们使用的比较简单的代码就是在这个基础上的
	M：Model层，针对业务创建的数据结构和类，和View无关，与业务相关，对数据库和网络等数据处理等都在这一层面
	V：View层,视图层，对xml解析还有对View的处理工作
	C：Controller层，构建View层和Model层的中间层，
		1.接收来自View层的调用。
		2.调用Model层的数据处理。
		3.获取Model层的数据处理结果。
		4.最后通知View层显示结果
		
	缺点：MVC结构层次比较混乱，View层也可以绕过Controller层直接调用Model层的数据处理逻辑，而Model层也可能会直接绕过Controller层通知View层显示结果

MVP：
未解决MVC层结构层次混乱的情况，推出了MVP模式
MVP模式和之前MVC模式很像，把Controller层改为Present层，并且严格执行：View层和Model层不能直接通讯，需要通过Present层
以下是伪代码：
	1.创建一个IView接口：
		interface IView{
			void showText(String str);
			void showFail();
		}
	2.在Activity中实现IView接口：
		public class MyActivity extends Activity implement IView{
			IPresent IPresent;
			Override
			protected void onCreate(@Nullable Bundle savedInstanceState) {
				setContentView(R.id.content);
				//这里需要创建一个IPresent实例
				IPresent = new MyPresent(this);//传入IView接口当前类实现了
				btn.setOnClickListner(
					IPresent.getTextView("");
				)
			}
			@Override
			void showText(String str){
				Log.d("TAG","str:"+str);
			}
			
			@Override
			void showFail(){
				Log.d("TAG","show");
			}
			
		
		}
	3.创建一个IPresent接口和一个用于model层回调结果的Listener
		interface IPresent{
			void getTextView(String str);//用于View层调用
		}
		interface ModelListener{
			void onFail(String reson);
			void onSuccess(String result);
		}
		
	4.创一个IPresent接口实现类
		public class MyPresent implement IPresent ,ModelListener{
			IView iView;//保存当前IView接口实现类，后面需要使用
			IModel iModel;//创建一个iModel实现类
			public MyPresent(IView iView){
				this.iView = iView;
				//这里需要创建Model接口实现类
				iModel = new MyModel(this);
			}
			@Override
			void getTextView(String str){
				iModel
			}
			@Override
			void onFail(String reson){
				iView.showFail
			}
			@Override
			void onSuccess(String result){
				
			}
		
		}
	5.创建一个IModel接口
		interface IModel{
			void getTextViewFromDbOrNet(String str);//用于View层调用
		}
	6.创建一个IModel接口实现类
		public class MyModel implement IModel{
			ModelListener listener;//保存当前IView接口实现类，后面需要使用
			public MyModel(ModelListener listener){
				this.listener = listener;
				
			}
			@Override
			void getTextView(String str){
				..
				retrofit.request(){
					void onFail(String reson){
						listener.onFail(reson);
					}
					void onSuccess(String result){
						listener.onSuccess(result);
					}
				}
				..
			}
		
		}
	




