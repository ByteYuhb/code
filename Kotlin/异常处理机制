前言
前面我们已经学习了协程的基础使用方法和关键知识点的学习，
我们先来简单回顾下前面讲的知识点：
协程的基础使用：
协程的定义：
1.协程通过将复杂性放入库来简化异步编程。程序的逻辑可以在协程中顺序地表达，而底层库会为我们解决其异步性。该库可以将用户代码的相关部分包装为回调、订阅相关事件、在不同线程（甚至不同机器！）上调度执行，而代码则保持如同顺序执行一样简单。
2.协程是一种并发设计模式，您可以在Android平台上使用它来简化异步执行的代码

协程生命周期：
+-----+ start  +--------+ complete   +-------------+  finish  +-----------+
| New | -----> | Active | ---------> | Completing  | -------> | Completed |
+-----+        +--------+            +-------------+          +-----------+
                 |  cancel / fail       |
                 |     +----------------+
                 |     |
                 V     V
             +------------+                           finish  +-----------+
             | Cancelling | --------------------------------> | Cancelled |
             +------------+                                   +-----------+
协程的三种创建方式及返回值解析
runBlocking：阻塞创建协程的线程，并运行协程作用域中的job任务
launch：不阻塞创建线程，返回一个Job，且协程没有被挂起，任务执行中可以被异步取消
async：不阻塞创建线程，且协程没有被挂起，返回一个DeferredCoroutine，此时协程状态为Active，

协程的核心知识点：
1.协程调度器CoroutlineDispatcher：指定协程在哪个线程上运行
2.协程上下文CoroutlineContext：包含一个线程内部所需的所有上下文信息
3.协程启动模式CoroutlineStart：指定了协程的启动方式：如default或者lazy等
4.协程作用域CoroutlineScope：指定了协程的作用域
5.挂起函数以及suspend关键字的使用：挂起函数会将协程挂起，但不阻塞原有执行线程

接下来
这篇文章我们来讲解下协程中的异常处理机制
笔者会由浅入深，深度解析协程的异常处理
关于协程的其他系列文章，请根据需求自行阅读

Android体系课之--Kotlin协程篇-协程入门 -协程基础用法（一）
Android体系课之--Kotlin协程进阶篇-协程中关键知识点梳理（二）
Android体系课之--Kotlin协程进阶篇-协程的异常处理机制（三）
Android体系课之--Kotlin协程进阶篇-协程加Retrofit创建一个MVVM模式的网络请求框架（四）

简介：
只要是代码就一定会出现异常，如果不能正确的处理好异常这块任务，可能会导致很多稀奇古怪的问题。
异常处理是协程的一个关键机制，因为其涉及的内容比较深，笔者单独启动一篇来介绍它

那么协程是如何处理异常的呢：
我们先来举个例子：





