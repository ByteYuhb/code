需求：
使用MVVM+协程+Retrofit+OkHttp+DataBinding+LiveData实现一个网络请求框架
本文以金山词霸翻译接口作为网络请求接口

首先添加如下依赖：
implementation "org.jetbrains.kotlin:kotlin-stdlib:1.3.72"
// 协程核心库
implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.1"
// 协程Android支持库
implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.1"

implementation "androidx.activity:activity-ktx:1.2.2"
implementation "androidx.fragment:fragment-ktx:1.3.3"
implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.3.1"
//协程ViewModel支持库
implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1"

// retrofit
implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
implementation "com.squareup.retrofit2:converter-scalars:$retrofit_version"
implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

根据后台接口创建返回实体
data class Translation<M>(
    val status:Int,
    val message:M) {
}

data class Message(
    val baesInfo: BaseInfo,
    val word_name: String
)
data class BaseInfo(
    val from:String,
    val to:String,
    val translate_result:String
)

定义网络请求接口
interface TranslationInterface{
    @GET("/dictionary/word/query/v2?client=1&timestamp=1637143127&isChangeTo=0&sign=63243e0fb77fa81e&uuid=d6ceb7789ff04ff69355cea0a3325e40&sv=android10&v=11.1.7&uid=&translateType=-1&key=1000001&identity=12&word=%25E4%25BD%25A0%25E5%25A5%25BD%25E5%25B0%258F%25E5%25A7%2590&signature=7cdc8cee1566bde7c34a817fbab31a20")
    suspend fun getTranslationResult():Translation<Message>
}

创建Retrofit实例以及获取请求接口对象实例
object ServerApi {
    val SERVICE:TranslationInterface by lazy {
        build()
    }

    private fun build(): TranslationInterface{
        val retrofit = Retrofit.Builder()
            .baseUrl(HttpConstant.HTTP_SERVER)
            .addConverterFactory(GsonConverterFactory.create())
            .client(OkHttpClientManager.client)
            .build()

        return retrofit.create(TranslationInterface::class.java)
    }
}
object OkHttpClientManager {
    val client: OkHttpClient by lazy(LazyThreadSafetyMode.SYNCHRONIZED){
        buildClient()
    }

    private fun buildClient(): OkHttpClient {
        return OkHttpClient.Builder().apply {
            addInterceptor(CommonInterceptor())
        }.build()
    }
}
object HttpConstant{
    internal val HTTP_SERVER = "http://dict.iciba.com/"
    val HTTP_OK = 0
}
这里使用自定义OkHttpClient创建了一个发送数据的日志打印拦截器
class CommonInterceptor:Interceptor {
    override fun intercept(chain: Interceptor.Chain): Response? {
        val oldRequest = chain.request()
        println(oldRequest)
        return chain.proceed(oldRequest)
    }
}
使用ViewModelFactory创建ViewModel对象
class TranslationViewModelFactory(private val repository: TranslationRepository):
ViewModelProvider.Factory{
    override fun <T : ViewModel?> create(modelClass: Class<T>): T {
        return TranslationViewModel(repository) as T
    }
}

class TranslationViewModel(private val repository: TranslationRepository):BaseViewModel(){
    var lda = MutableLiveData<String>()
    fun getTranslationResult(view:View) {
        getResult("你好，小姐")
    }
    fun getResult(str:String){
        requestMain {
            when(val w = repository.getWeather2()){
                is DataResult.Success-> onSuccess(message = w.result)
                is DataResult.Error-> println(message = w.e.message)
                else-> println("other")
            }
        }
    }
    val simpleWatcher = object :TextWatcher{
        override fun afterTextChanged(s: Editable?) {

        }

        override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {

        }

        override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
            getResult(s.toString())
        }

    }
    fun onSuccess(message: Message?){
        println("message:$message")
        if (message != null) {
            lda.value = message.baesInfo.translate_result
        }
    }


}

Activity中代码：
class TranslationActivity: AppCompatActivity() {
    private val viewModel by viewModels<TranslationViewModel> {
        ViewModelUtils.provideTranslationViewModelFactory()
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        val viewLayout = DataBindingUtil.setContentView<TranslationLayoutBinding>(
            this,
            R.layout.translation_layout
        )
        viewLayout.vm = viewModel
        viewLayout.lifecycleOwner = this
    }

}

资源文件代码：
<?xml version="1.0" encoding="utf-8"?>
<layout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">

    <data>

        <variable
            name="vm"
            type="com.example.demo.democoroutline.TranslationViewModel" />
    </data>

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <EditText
            android:id="@+id/id_et"
            android:layout_width="match_parent"
            android:layout_height="60dp"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintLeft_toLeftOf="parent"
            app:layout_constraintRight_toRightOf="parent"
            app:layout_constraintBottom_toTopOf="@id/id_tv"
            android:background="#11000000"
            android:hint="你好，小姐"
            app:addCaged="@{vm.simpleWatcher}"
            />

        <TextView
            android:id="@+id/id_tv"
            android:layout_width="match_parent"
            android:layout_height="300dp"
            app:layout_constraintTop_toBottomOf="@id/id_et"
            app:layout_constraintLeft_toLeftOf="parent"
            app:layout_constraintRight_toRightOf="parent"
            app:layout_constraintBottom_toTopOf="@id/id_btn"
            android:background="#22000000"
            android:text="@{vm.lda}"
            />

        <Button
            android:text="@string/app_name"
            android:id="@+id/id_btn"
            android:layout_width="match_parent"
            android:layout_height="60dp"
            android:onClick="@{vm::getTranslationResult}"
            app:layout_constraintLeft_toLeftOf="parent"
            app:layout_constraintRight_toRightOf="parent"
            app:layout_constraintTop_toBottomOf="@id/id_tv" />

    </androidx.constraintlayout.widget.ConstraintLayout>
</layout>

运行结果：








