性能优化
平时遇到的情况：这个app也太卡了吧？启动速度太慢了？崩溃了？图片显示不出来？
这些情况可以总结为：
1.apk包体积优化
2.启动速度？
3.稳定性？
4.内存优化
5.app流畅度？

1.apk包体积优化?
	查看apk的组成：
		使用as打开apk文件查看，删除不需要的资源文件或者给占用大的文件做裁剪，从而达到瘦身的目的
		1.减小res资源大小
			1.删除不需要的资源文件：使用lint来搜索不需要的资源文件或者在buildTypes 中添加shrinkResources true
				
			2.重复资源的优化：删除文件名不一样但是内容一样的资源文件，可以通过比较md5值来判断是否是一样的资源，然后编辑resources.arsc来重定向
			
			3.图片压缩：对大图片进行压缩，使用tinypng等插件对图片进行压缩
			
			4.资源混淆：使用AndResGuard ：https://github.com/shwenzhang/AndResGuard/blob/master/README.zh-cn.md 可以对资源进行混淆
				启动方式在Terminal：gradlew resguardDebug如果需要获取release的apk需要设置signConfig
			5.指定语言：
				android {
					defaultConfig {
						...
						// 仅支持 中文
						resConfigs "zh" 
					}
				}
		2.如何减少 so 库资源大小
			1.自己编译的 so：release 包的 so 中移除调试符号。
				如果是 cmake 来编译的话，可以再编辑脚本添加如下代码：
					set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -s")
					set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -s")
			2.别人编译的 so：联系作者修改，一般很难联系到。
			3.动态下发 so：可以通过服务器下发 so , 下载完后再进入应用，但是体验不好，但是是一个思路。
			4.只编译指定平台的 so：一般我们都是给 arm 平台的机器开发，如果没有特殊情况，我们一般只需要考虑 arm 平台的。具体的方法是 app 下的 build.gradle 添加如下代码：
				android {
					defaultConfig {
						ndk {
							abiFilter "armeabi"
						}
					}
				}
				
									
				平台				说明

				armeabi-v7a

					arm 第 7 代及以上的处理器，2011 年后的设备基本都是

				arm64-v8a

					arm 第 8 代 64 位处理器设备

				armeabi

					arm 第 5、6 代处理器，早期的机器都是这个平台

				x86

					x86 32 位平台，平板和模拟器用的多

				x86_64

					x86 64 位平台
			


		3.如何减少代码资源大小
			1.一个功能尽量用一个库：比如加载图片用了glide就不要用fresco了
			2.混淆：混淆的话，减少了生成的 class 大小，这样积少成多，也可以从一定层度减少 apk 的大小。
			3.R 文件内联：通过把 R 文件里面的资源内联到代码中，从而减少 R 文件的大小。可以使用 shrink-r-plugin 工具来做 R 文件的内联。
 
 
2.启动速度优化
	1.启动的类型分为：冷启动和热启动
		冷启动：启动时后台没有该进程存在，系统需要重新创建一个进程
		热启动：启动时该进程已经存在，比如按home键临时退出该应用
	2.如何获取启动时间：
		1.adb 命令：adb shell am start -S -W 包名/启动类的全名
			adb shell am start -S -W xxx/xxxActivity
				Stopping: xxx
				Starting: Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] cmp=xxx/xxxActivity }
				Status: ok
				Activity: xxx/xxxActivity
				ThisTime: 770
				TotalTime: 770 这个时间可以看做是启动时间
				WaitTime: 848
				Complete
		2.另外，谷歌在 Android4.4（API 19）上也提供了测量方法，在 logcat 中过滤 Displayed 字段也可以看到启动时间。
			2021-04-06 19:25:52.803 2210-2245 I/ActivityManager: Displayed xxx/xxxActivity: +623ms
		3.以上两种方式只能获取在这个启动的Activity之前没有其他Activity的出现，针对启动的Activity不是第一个启动的如广告Activity等，可以使用另外一种方法获取
			AMS会通过Zygote创建应用程序的进程后,执行Application构造方法 –> attachBaseContext() –> onCreate() –>
			Activity onCreate() –>–> onStart() –> onResume() –> 测量布局绘制显示在界面上–>onWindowFocusChanged()绘
			制完毕 在Application的attachBaseContext()方法中开始计算冷启动计时，然后在真正首页Activity的
			onWindowFocusChanged()中停止冷启动计时。
			
			设置一个Util类专门做计时,Application的attachBaseContext()开始,首页Activity的 onWindowFocusChanged()结束
		
		
	3.如何监控启动过程
		1.使用AS自带的profier工具，可以查看应用启动的各方法耗时情况，针对性的做出修改
			Profiler-->Cpu-->Sample java methods or trace java methods
		
	4.一般优化方法：
		1.耗时操作放到异步线程：比如文件解压、读写等耗时 IO 操作可以新开一个线程来执行。
		2.延时初始化：即暂时不适用的工具类等延后到使用的时候再去初始化。比如从 xml 里面读取颜色，可以考虑在使用的时候再去读取和解析。
		3.线程优化：线程创建是一个耗资源的操作，可以使用线程池来操作线程。
3.app稳定性优化
	稳定性优化主要包括两种：ANR和Crash
	1.Crash：主要是由于发生了未被捕获的异常，导致crash
		包括java层和native层：
		java层crash：
			可以为系统设置一个默认的异常捕获handler：UncaughtExceptionHandler
			将新的报错记录到日志文件中，再转给旧的handler处理。
		native层crash：
			Native 层如果发生未处理的异常(注:如果 Native 层捕获了异常，是可以通过 JNI 抛到 Java 层去处理的) ，系统会发出信号给 Native 层，在 Native 层如果要收集未处理的异常信息，就需要注册对应信号的处理函数。当发生异常的时候，Native 层会收到信息，然后通过处理器来收集信息。
			注册信号处理函数如下：
				#include <signal.h> 
				int sigaction(int signum,const struct sigaction *act,struct sigaction *oldact));
			signum：代表信号编码
			act：指向结构体sigaction的一个实例的指针，该实例指定了对特定信号的处理，如果设置为空，进程会执行默认处理。
			oldact：和参数act类似，只不过保存的是原来对相应信号的处理，也可设置为NULL。
	2.ANR：一般 ANR 发生的时候， logcat 里面会打印 ANR 相关的信息，过滤关键字 ANR 就可以看到
		然后一般会在 /data/anr 目录下面生成 traces.txt 文件，里面一般包含了 ANR 发生的时候，系统和所有应用的线程等信息(需要注意的是，不同的 rom 可能都不一样)，通过 logcat 打印的信息和 traces.txt 里面的信息，大部分的 ANR 可以分析出原因，但是呢，也有相当一部分的 ANR 问题无法分析，因为 logcat 和 traces.txt 提供的信息有限，有时候甚至没有特别有用的信息，特别是 Android 的权限收紧， traces.txt 文件在高 Android 版本无法读取，给 ANR 问题的分析增加了不少的困难。不过好在最近发现头条给 ANR 写了一个系列的文章，里面对 ANR 问题的治理方法，个人觉得很好，这里引用一下。
		
		要求：主线程尽量不要做耗时的任务，会引起ui卡杜甚至出现ANR的情况

4.内存优化：
	使用AS自带的Profiler工具可以查看各阶段内存的使用情况：
	根据Profiler工具找到内存消耗大的场景，然后进行优化：
	平时可能遇到的：
		1.图片方面的优化：
			1.暂时不用的图片不要去加载，等到需要再去加载，比如网络异常的图片，在出现异常的情况下再去加载即可，尽量不要浪费资源
			2.尽量加载指定大小的图片
			3.根据不同的格式加载对应的图片
			4.不显示的图片可以优先释放内存
		2.尽可能少的创建对象，尽可能多的复用对象，如单例模式
			1.在自定义view的时候， 不要在onDraw方法中创建对象，因为onDraw方法会被频繁的调用，可能是产生大量的对象，还会触发gc，引起卡顿等
			2.尽量少创建线程，异步任务使用线程池比较好
			3.尽量使用stringbuilder或者stringbuffer
		3.内存泄露：
			1.内存泄漏指的是本应该释放的内存，由于一些原因，被 GC ROOT 对象持有，从而而无法在 GC 的时候释放。
			
			2.使用leakcanary监控内存泄露到GCRoot的引用链
				使用方式：
				1.在 APP 的 build.gradle 下面新增。
					debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'
				leakcanary 比较核心的一个原理就是利用了弱引用的一个特性，这个特性就是：
					在创建弱引用的时候，可以指定一个 RefrenceQueue ，当弱引用引用的对象的可达性发生变化的时候，系统会把这个弱引用引用的对象放到之前指定的 RefrenceQueue 中等待处理。
					所以 GC 后，引用对象仍然没有出现在 RefrenceQueue 的时候，说明可能发生了内存泄漏，这个时候 leakcanary 就会 dump 应用的 heap ，然后用 shark 库分析 heap ，找出一个到 GC ROOT 的最短引用链并提示。
			3.常见的内存泄漏的场景
				1.静态变量持有 Context 等。

				2.单例实例持有 Context 等。

				3.一些回调没有反注册，比如广播的注册和反注册等，有时候一些第三方库也需要注意。

				4.一些 Listener 没有手动断开连接。

				5.匿名内部类持有外部类的实例。比如 Handler , Runnable 等常见的用匿名内部类的实现，常常会不小心持有 Context 等外部类实例。
		
5.操作流畅度优化
	为什么会卡顿?
		1.读写文件 2.解析大量图片 3.频繁请求网络 4.复杂的布局 5.频繁创建对象
	如何检测卡顿?
		我们知道，Android 里面，界面的刷新需要再主线程或者说 UI 线程执行。而界面的绘制起始点又利用了 Looper 消息循环机制。Looper 消息循环机制有一个有意思的特点，就是 Looper 在 dispatch Message 的时候，会在 dispatch 前和 dispatch 后利用 Printer 打印特定 tag 的字符串，通过接管 Printer ，我们就可以获取 dispatch message 前后的时机。
		然后我们可以在 dispatch message 之前，在异步线程启动一个抓取系统信息的延时任务。在 dispatch message 之后，我们可以移除异步线程的这个延时任务。如果某个消息的执行没有超过阈值，那就表示在异步线程的延时任务被取消，表明没有卡顿。如果某个消息的执行时间超过了阈值，那异步线程里的延时任务就会执行，表明有卡顿，异步线程的延时任务会获取此时的系统状态，从而辅助我们分析卡顿问题。
	如何优化卡顿?
		1.读写文件:
			最常见的一个读写文件而不自知的就是 SharePerfrences 的使用，使用 sp 的时候需要注意不要频繁调用 apply 或者 commit 方法，因为每调用一次就有可能会有一次写文件操作(高版本系统做了优化 apply 做了优化，不一定会写文件)。所以，如果调用次数多的话，就会多次写文件，写文件又是一个耗时且耗资源的操作，所以要少做。
			
			一般优化方法是合理拆分 sp 文件，一个 sp 文件不要包含太多的项，同时每一项的内容尽量短。尽量批量提交数据后再 commit 或者 apply 。同时需要注意的是 commit 会直接触发写文件(内容有变化的时候)，所以如果在 UI 线程调用 commit 方法需要注意可能会阻塞 UI 线程。
			如果有更高的性能需求，可以考虑用 mmkv 来替换或者 DataStore 来替换 sp 。具体的替换方法就不细说了。网上有很多资料参考。
			
			另外一个常见的读写文件的场景是从 xml 文件里面读取布局、色值等操作，这些都是一些 io 操作。从 xml 读取布局的话，可以考虑用代码直接创建 view 来优化，从 xml 里面读取颜色可以考虑加个 HashMap 来优化
		2.解析大量图片
			解码图片毫无疑问是一个计算量大的操作，所以一般加载图片的时候最好根据实际显示的尺寸做压缩，并且保存压缩后的缩略图，方便下次直接加载。
			
			另外还需要注意列表滚动过程中，控制对图片的加载，一般列表在滑动过程中，不加载图片，等列表滚动停止后，才开始加载图片。
			另外的一个优化的方法就是减少图片的使用，不过这个难度有点大。
			另外还可以考虑针对不同的图片格式，用不同的解码格式。比如 png 格式的图片根据机器实际情况选择 8888 或者 4444 解码方式解码图片。如果是 jpg/jpeg 格式的图片，就用 565 的解码方式解码图片。对于用不同的解码方式解码图片，效率是否会高，本人没做过测试，但是毫无疑问，内存的使用是不同的
		3.频繁请求网络
			网络请求的话，可以参考下面的优化方法。
			1.如果使用 okhttp 请求网络的话，尽量全局使用一个 httpclient ，这样做的好处是可以复用，提高网络请求效率。
			2.后台支持的话，开启 gzip 压缩，这样网络传输的数据量小些，传输效率会高些。
			3.自定义 dns ，减少解析 dns 的时间。
			4.通过和后台商量，部分数据后台接口一步到位，尽量避免多次请求后才拿到完整的目标数据。
		
		4,复杂的布局
			如果布局复杂的话， CPU 要进行大量的计算才可以确定最终的图形。所以布局复杂的话，CPU 需要大量的运算资源，所以优化复杂的布局是很有必要的。
			1.减少布局层次，可以利用 ViewStub 、merge 和 include 等标签来尝试减少布局层次。
			2.使用高效的布局容器，比如 ConstraintLayout，可以不用嵌套布局容器来实现复杂效果。
			3.部分效果可以考虑用自定义 View 实现。
			
			这个优化感觉不是特别好做，可能优化了，但是效果不好，但是又不能不做。
		5.频繁创建对象
			为什么这个要列出来呢？因为频繁创建对象，可能会短时间内消耗大量内存，然后内存不足的时候系统就会尝试 GC 来回收对象，而 GC 是很耗资源的操作，虽然现在 Android 系统对 GC 做了很多优化，但是尽量减少 GC 的触发总是好的。
			一般频繁创建对象的场景有：
				1.自定义 View 的时候，在 onDraw 方法创建临时对象
				2.循环里面使用 "+" 拼接字符串
				3.ArrayList 等有容积限制的容器类初始化的容量不合理，导致后续新增数据频繁扩容。
				除了频繁创建对象可能会触发 GC ，如果某次使用过大的内存也可能会导致 GC ，比如展示一个超大的 Bitmap ，虽然可以用缩略图来展示，但是可能会碰到需要放大查看具体细节的场景，这个时候可以考虑采用裁剪显示区域(BitmapRegionDecoder)的方式来解析图片。



以上是我工作中涉及到的优化点，可能不是很全，也难免有遗漏。如果有错误和遗漏，还请大家指正。
	



