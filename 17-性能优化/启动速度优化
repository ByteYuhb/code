启动优化

App启动哪些任务要处理？

1.文件系统完整性 
2.数据库系统 
3.网络正常与否 
4.签名校验 
5.安全 
6.隐私条款的同意 	
7.权限 
8.引导页 
9.广告 
10.更新提示

如何优化？
	1.架构层面 2.用户体验(效果和速度)
1.架构：启动器模式 图论广度优先 有向无环图 中小型项目不需要使用启动器模式，防止过度设计  拓扑排序
Rxjava 责任链模式 appStart androidStart 任务的调度和管理自定义处理

2.用户体验：需要了解android启动过程
做到6到7点：
	1.setContentView优化：
		1.减少xml层级关系
		2.处理过度绘制问题
	2.不要再onCreate过程中增加太多耗时操作
	3.在Activity的onWindowFocusChanged回调中进行初始化
	4.懒加载（ViewStub，HashMap Viewpage Pagging 网络访问） 预加载
	5.有些动作放到ContentProvider初始化的时候做leakCanry AndroidStart
	6.代码优化	


2：：：	
	1.简介：
		启动的类型分为：冷启动和热启动
			冷启动：启动时后台没有该进程存在，系统需要重新创建一个进程，
					冷启动流程可以分为三步：创建进程、启动应用和绘制界面，创建进程阶段的三件事都是系统做的，
					从启动应用阶段开始，随后的任务和我们自己写的代码有一定的关系。
			热启动：启动时该进程已经存在，比如按home键临时退出该应用
	2.三个启动问题：启动速度慢具体的表现有点击图标响应慢、首页显示慢和显示后无法操作三个。
		1. 点击图标响应慢
			如果我们指定了透明的主题，那用户点击桌面图标后，需要在 Application 创建和闪屏页创建完成后才能看到商品，从用户的角度来看，就是点击了图标，结果过了几秒还是停在桌面，就像是点击无效一样。
		2. 首页显示慢
			现在应用启动流程越来越复杂，闪屏广告、热修复、插件化框架等，所有的准备工作都要在启动阶段完成，在中低端机上可能要十几秒才能启动，难以忍受。
		3. 首页显示后无法操作
			假如把初始化工作通过不恰当的方式延迟执行，就有可能出现首页出来后根本无法操作，假如用户看到了首页，但是要等过十几秒后才能滑动，那这个优化的意义就非常小了，启动优化不能把注意力都放在首帧绘制时间上，而是要从用户的真实体验触发，从用户点击图标到可操作的整个过程的执行速度，都是启动优化要解决的问题。
	3.三种测量方法：命令测量和谷歌日志测量和埋点测量。
		1.命令测量：adb 命令：adb shell am start -S -W 包名/启动类的全名
				adb shell am start -S -W xxx/xxxActivity
					Stopping: xxx
					Starting: Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] cmp=xxx/xxxActivity }
					Status: ok
					Activity: xxx/xxxActivity
					ThisTime: 770
					TotalTime: 770 这个时间可以看做是启动时间
					WaitTime: 848
					Complete
			
			ThisTime 代表最后一个 Activity 启动所需要的时间，也就是最后一个 Activity 的启动耗时。
			TotalTime 代表所有 Activity 启动耗时，在上面的输出中，TotalTime 和 ThisTime 是一样的，因为这个 Demo 没有写 Splash 界面。
			WaitTime 是 AMS 启动 Activity 的总耗时。
	 		
		2.谷歌日志测量：另外，谷歌在 Android4.4（API 19）上也提供了测量方法，在 logcat 中过滤 Displayed 字段也可以看到启动时间。
			2021-04-06 19:25:52.803 2210-2245 I/ActivityManager: Displayed xxx/xxxActivity: +623ms
		3.埋点测量：以上两种方式只能获取在这个启动的Activity之前没有其他Activity的出现，针对启动的Activity不是第一个启动的如广告Activity等，可以使用另外一种方法获取
				AMS会通过Zygote创建应用程序的进程后,执行Application构造方法 –> attachBaseContext() –> onCreate() –>
				Activity onCreate() –>–> onStart() –> onResume() –> 测量布局绘制显示在界面上–>onWindowFocusChanged()绘
				制完毕 在Application的attachBaseContext()方法中开始计算冷启动计时，然后在真正首页Activity的
				onWindowFocusChanged()中停止冷启动计时。
				
				设置一个Util类专门做计时,Application的attachBaseContext()开始,首页Activity的 onWindowFocusChanged()结束
				
				计算启动耗时的一个误区就是在 onWindowFocusChanged() 方法中计算启动耗时。
				onWindowFocusChanged() 方法只是 Activity 的首帧时间，是 Activity 首次进行绘制的时间，首帧时间和界面完整展示出来还有一段时间差，不能真正代表界面已经展现出来了
				正确的计算启动耗时的时机是要等真实的数据展示出来，比如在列表第一项的展示时再计算启动耗时。
				在 Adapter 中记录启动耗时要加一个布尔值变量进行判断，避免 onBindViewHolder 方法被多次调用导致不必要的计算。
						
	4.两个分析工具：1 Debug  2 Trace
		1.Debug：
			首先通过 Debug.startMethodTracing("输出文件") 开始跟踪方法，记录一段时间内的 CPU 使用情况。
			当我们调用了 Debug.stopMethodTracing() 停止跟踪后，系统就会为我们生成一个文件，我们可以通过 CPU Profiler 查看这个文件记录的内容。
			文件生成的位置在 Android/data/包名/files 下，下面我们来看一个示例。
				
		2.Trace：
			Trace 结合了 Android 内核数据，分析了线程活动后会给我们生成一个非常精确 HTML 格式的报告。
			Trace 工具类默认只能 API 18 以上的项目中才能使用，如果我们的兼容版本低于 API 18，我们可以使用 TraceCompat。下面来看看具体用法。
			首先在 Application 中调用 Trace 的 beginSection() 方法。
				TraceCompat.beginSection();
				init();
				TraceCompat.endSection();
			打开platform-tools/systrace 目录，就能看到一个叫 systrace.py 的 python 脚本，执行下面这个命令，就可以开始追踪系统信息。
				python systrace.py -t 10 -o mytrace.html -a
				-t 后面表示的是跟踪的时间，比如上面设定的是 10 秒就结束。
				-o 后面表示把文件输出到指定目录下。
				-a 后面表示的是要启动的应用包名
			输入完这行命令后，可以看到开始跟踪的提示。看到 Starting tracing 后可以打开打开我们的应用。
			
			
		3.一般优化方法：
			1.耗时操作放到异步线程：比如文件解压、读写网络读取等耗时 IO 操作可以新开一个线程来执行,使用线程池。
			2.延时初始化：我们可以使用线程池来实现异步初始化,即暂时不适用的工具类等延后到使用的时候再去初始化。比如从 xml 里面读取颜色，可以考虑在使用的时候再去读取和解析。延迟启动器利用了 IdleHandler 实现主线程空闲时才执行任务
			3.线程优化：线程创建是一个耗资源的操作，可以使用线程池来操作线程。
			4.闪屏页：闪屏页是优化启动速度的一个小技巧，虽然对实际的启动速度没有任何帮助，但是能让用户感觉比启动的速度要快一些。
				闪屏页就是在 App 打开首屏 Activity 前，首先显示一张图片，这张图片可以是 Logo 页，等 Activity 展示出来后，再把 Theme 变回来。
				原理：冷启动的其中一步是创建一个空白 Window，闪屏页就是利用这个空白 Window 显示占位图。
				
				步骤：
					第一步是在 drawable 目录下创建一个 splash.xml 文件。
						<?xml version="1.0" encoding="utf-8"?>
						<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
							<item android:drawable="@android:color/background_dark"></item>
							<item >

								<bitmap
									android:src="@drawable/hanbao"
									android:gravity="center"></bitmap>
							</item>
						</layer-list>
					第二步是在 values/styles.xml 中定义一个 Splash 主题。
						 <style name="Splash" parent="Theme.AppCompat.Light.DarkActionBar">
							<item name="windowBackground">@drawable/splash</item>
							<item name="android:windowFullscreen">true</item>
							<item name="windowNoTitle">true</item>
						</style>
					第三步是在清单文件中设置 Theme。
						<activity android:name=".libso.MyJniSoActivity"
							android:theme="@style/Splash">
							<intent-filter>
								<action android:name="android.intent.action.MAIN" />

								<category android:name="android.intent.category.LAUNCHER" />
							</intent-filter>
						</activity>
					第四步是在调用 super.onCreate 方法前切换回来
						 setTheme(R.style.AppTheme);
		
		4.启动器优化
			第一步：第一步是我们要对代码进行任务化，任务化是一个简称，比如把启动逻辑抽象成一个任务。
			第二步：根据所有任务的依赖关系排序生成一个有向无环图，这个图是自动生成的，也就是对所有任务进行排序。
			第三步：多线程根据排序后的优先级依次执行。
			
				