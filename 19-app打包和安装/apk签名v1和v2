APK签名
v1：
	签名过程：
		签名三兄弟：
		1.MANIFEST.MF
		2.CERT.SF
		3.CERT.RSA
		
		1.MANIFEST.MF
			该内容保存的是逐一遍历 APK 中的所有条目，使用摘要算法如SHA1或者SHA256算出摘要信息，并使用base64编码后，存放到MANIFEST.MF块中
			每个块包含一个Name属性：存放该文件的路径
		2.CERT.SF
			SHA1-Digest-Manifest：对整个 MANIFEST.MF 文件做 SHA1（或者 SHA256）后再用 Base64 编码
			SHA1-Digest：对 MANIFEST.MF 的各个条目做 SHA1（或者 SHA256）后再用 Base64 编码
		3.CERT.RSA
			这里会把之前生成的 CERT.SF 文件，用私钥计算出签名, 然后将签名以及包含公钥信息的数字证书一同写入 CERT.RSA 中保存
			这个数字证书就是我们android签名的时候使用的签名keystore文件：
			使用下面命令查看签名证书情况：
			openssl pkcs7 -inform DER -in /<文件存放路径>/Sample-release_new/original/META-INF/CERT.RSA -text -noout -print_certs
		完整签名流程：
	
	校验过程：
		在安装步骤校验：
		1.检查APK中所有的文件，对应的摘要值和MANIFEST.MF中的值保持一致
		2.对MANIFEST.MF中的值做二次摘要，查看是否和CERT.SF中的值保持一致
		2.使用数字证书文件CERT.RSA检查SF文件有没被修改过，使用公钥证书解密
		3.解密后的摘要信息和步骤2中的二次摘要信息对比，看下是否一致
		4.一致就通过，说明apk信息没有被更改过
	
	为什么使用这样的签名流程呢？
		1.更改APK文件里面的文件，MANIFEST.MF中的摘要信息不一致，校验失败
		2.在1的基础上更改MANIFEST.MF的摘要信息，那么和CERT.SF中的摘要信息会不一致，校验失败
		3.在2的基础上更改CERT.SF中的摘要信息，那么CERT.RSA中的签名信息不一致，校验失败。
		4.在3的基础上更改证书，不行，因为没有私钥。
		
		所有可以基本上保证数据的不可篡改性	


v2签名:
	v1缺点：
		签名速度慢，需要对每个文件进行签名
		完整性保持不够：因为META-INF 目录用于签名，所以不会记录到校验信息内，用户可以在这个文件中随意添加文件
		
	v2：	
		签名：
			就是把 APK 按照 1M 大小分割，分别计算这些分段的摘要，
			最后把这些分段的摘要在进行计算得到最终的摘要也就是 APK 的摘要。
			然后将 APK 的摘要 + 数字证书 + 其他属性生成签名数据写入到 APK Signing Block 区块。
			
		校验：v2校验过程.png
			v2 签名机制是在 Android 7.0 以及以上版本才支持。因此对于 Android 7.0 以及以上版本，
			在安装过程中，如果发现有 v2 签名块，则必须走 v2 签名机制，不能绕过。否则降级走 v1 签名机制。
			v1 和 v2 签名机制是可以同时存在的，其中对于 v1 和 v2 版本同时存在的时候，v1 版本的 META_INF 的 .SF 文件属性当中有一个 X-Android-APK-Signed 属性：
				X-Android-APK-Signed: 2
		v2 对多渠道打包的影响
		之前的渠道包生成方案是通过在 META-INF 目录下添加空文件，用空文件的名称来作为渠道的唯一标识。但在新的应用签名方案下 META-INF 已经被列入了保护区了，向 META-INF 添加空文件的方案会对区块 1、3、4 都会有影响。
		
		总结V2：
			1.V2并行计算加快签名速度
			2.V2保证META-INFO目录不会被篡改


	