类加载机制：
将class文件内容加载到虚拟机内存中。一个类只能被一种ClassLoader加载，否则会造成类混乱。

Java中的ClassLoader：
	加载器分类：
	1.引导类加载器 BootStrapClassLoader
		由C、C++中编写完成
	2.扩展类加载器 ExtClassLoader
	3.应用程序类加载器 AppClassLoader
	4.自定义类加载器 CustomClassLoader

	2.3.4均继承ClassLoader

	父子关系，非继承关系

	CustomClassLoader->AppClassLoader->ExtClassLoader->BootStrapClassLoader


	双亲委派原则


		类加载原则，首先检查CustomClassLoader缓存中是否有加载过这个类，如果没有，就调用父加载器的加载，以此类推，最终调用到最顶层BootStrapClassLoader的加载模式

		好处：
		1.避免重复加载类
		2.更加安全，防止一个类被多个类加载器加载，导致虚拟机中类混乱。


	自定义ClassLoader：
		1.继承ClassLoader:
		2.复写findClass方法，并在方法中调用defindClass方法加载类
		3.调用自定义ClassLoader的loadClass方法，传入class文件的路径和类名


Android中的CLassLoader：
	加载器分类：
	系统类加载器：
		1.BootClassLoader：Android'系统启动时会使用该加载器预加载一些常用类，应用中无法访问。
		2.PathClassLoader：extends BaseDexClassLoader 
			加载已经安装了的apk的dex文件
			在SystemServer进程启动的时候，由孵化进程fork出子进程的时候，会调用createPathClassLoader方法创建
		3.DexClassLoader：extends BaseDexClassLoader 
			加载dex文件或者包含dex的压缩文件如apk,jar等，通过遍历获取dex文件
			参数：
				1.dexPath：dex文件的路径
				2.optimizedDirectory：解压的dex文件存储路径，必须是应用内部存储路径：一般是/data/data/<package name>/..
				3.parent:父加载器
				
		4.BaseDexClassLoader：继承ClassLoader，是CLassLoader的具体实现类
			在类加载过程中，如果ClassLoader没有加载成功，则会调用findClass方法，是一个空方法
			需要子类实现：子类BaseDexClassLoader的findClass方法中:
			pathList = new DexPathList()..
			BaseDexClassLoader:findClass(){
				pathList.findCLass();
			}
			DexPathList:findCLass
				for(Element element:dexElements){
					Class clazz = element.findCLass(name..);
					return clazz;
				}
			遍历dexElements数组:元素Element
			Element：
				File path;
				DexFile dexFile;
				Element:findClass(){
					return dexFile.loadClassBinaryName(...);
				}
			DexFile:
				loadClassBinaryName(){
					defineClassNative(...);调用native方法加载
				}
				
			总结：
			加载流程先是遵循双亲委派原则，如果委派原则没有找到此前加载过此类，则会调用CLassLoader的findClass方法，再去BaseDexClassLoader下面的dexElements数组中查找，如果没有找到，最终调用defineClassNative方法加载
		
	
			BaseDexClassLoader什么时候被创建：
				在应用启动的时候zygoteInit进程启动的时候，调用了预加载，预加载了一些常用类和资源文件等

		
		
	
	
		
		
	
	





