剑指Offer

05：替换空格
请实现一个函数，把字符串 s 中的每个空格替换成"%20"。
正则表达式https://juejin.cn/post/6844903845227659271
正则表达式到底是什么
	正则表达式(Regular Expression)其实就是一门工具，目的是为了字符串模式匹配，从而实现搜索和替换功能
从字符出发
	单个字符
	\n：换行
	\f:换页
	\r:回车
	\s:空白
	\t:制表符tab
	[\b]:回退backspace
多个字符：引入集合区间和通配符的方式就可以实现一对多的匹配了

	匹配区间   									正则表达式   记忆方式
	除了换行符之外的任何字符					.				句号,除了句子结束符
	单个数字, [0-9]								\d				digit
	除了[0-9]									\D				not digit
	包括下划线在内的单个字符，[A-Za-z0-9_]		\w   			word
	非单字字符									\W				not word
	匹配空白字符,包括空格、制表符、换页符和换行符 \s			space
	匹配非空白字符								\S				not space


循环与重复
	如何同时匹配多个字符
	要实现多个字符的匹配我们只要多次循环，重复使用我们的之前的正则规则就可以了。那么根据循环次数的多与少，我们可以分为0次，1次，多次，特定次。
	0 | 1
	元字符?代表了匹配一个字符或0个字符。设想一下，如果你要匹配color和colour这两个单词，就需要同时保证u这个字符是否出现都能被匹配到。所以你的正则表达式应该是这样的：/colou?r/。
	>= 0
	元字符*用来表示匹配0个字符或无数个字符。通常用来过滤某些可有可无的字符串。
	>= 1
	元字符+适用于要匹配同个字符出现1次或多次的情况。
	特定次数
	在某些情况下，我们需要匹配特定的重复次数，元字符{和}用来给重复匹配设置精确的区间范围。如'a'我想匹配3次,那么我就使用/a{3}/这个正则，或者说'a'我想匹配至少两次就是用/a{2,}/这个正则。
		- {x}: x次

		- {min, max}： 介于min次到max次之间

		- {min, }: 至少min次

		- {0, max}： 至多max次
	由于这些元字符比较抽象，且容易混淆，所以我用了联想记忆的方式编了口诀能保证在用到的时候就能回忆起来。



位置边界
	单词边界
		单词是构成句子和文章的基本单位，一个常见的使用场景是把文章或句子中的特定单词找出来。如：
			The cat scattered his food all over the room.
			我想找到cat这个单词，但是如果只是使用/cat/这个正则，就会同时匹配到cat和scattered这两处文本
			这时候我们就需要使用边界正则表达式\b，其中b是boundary的首字母。在正则引擎里它其实匹配的是能构成单词的字符(\w)和不能构成单词的字符(\W)中间的那个位置。
			上面的例子改写成/\bcat\b/这样就能匹配到cat这个单词了。
	字符串边界
		匹配完单词，我们再来看一下一整个字符串的边界怎么匹配。元字符^用来匹配字符串的开头。而元字符$用来匹配字符串的末尾。注意的是在长文本里，如果要排除换行符的干扰，我们要使用多行模式。试着匹配I am scq000这个句子
		I am scq000.
		I am scq000.
		I am scq000.
		我们可以使用/^I am scq000\.$/m这样的正则表达式，
		其实m是multiple line的首字母。
	正则里面的模式除了m外比较常用的还有i和g。前者的意思是忽略大小写，后者的意思是找到所有符合的匹配。

	边界和标志	正则表达式	记忆方式
	单词边界	\b	boundary
	非单词边界	\B	not boundary
	字符串开头	^	小头尖尖那么大个
	字符串结尾	$	终结者，美国科幻电影，美元符$
	多行模式	m标志	multiple of lines
	忽略大小写	i标志	ignore case, case-insensitive
	全局模式	g标志	global


子表达式



