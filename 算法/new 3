1.开闭原则：
	扩展开放，修改关闭

2.里氏替换原则：
	子类可以扩展父类的功能，但不能改变父类原有的功能

3.依赖倒置原则：
	高层模块不依赖低层模块，两种都应该依赖抽象；
	抽象不依赖细节 ，细节依赖抽象
	核心思想：要面向接口编程，不要面向实现编程
	依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合。
	作用：
		1.降低模块间的耦合
		2.提供系统稳定
		3.减小并行开发的风险
		4.提供代码可读性和可维护性
		
	实现方法:
		1.每个类尽量提供接口或者抽象类
		2.变量的声明尽量是接口或者抽象类
		3.任何类都不应该从具体类派生
		4.使用继承时尽量符合里氏替换原则
	
4.单一原则：

	每个类或者方法的职责尽量单一，尽量将类或者方法按功能拆分，不要所有功能写在一个类或者接口里面


5.接口隔离：
	要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法。
	要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。
	
	接口隔离和单一原则区别：
	1.接口隔离针对接口或者接口方法，单一原则针对具体实现类或者方法
	2.接口隔离是针对接口中的依赖关系，尽量接口之间没有依赖关系，单一原则指功能上的单一
	
	作用：
	1.接口颗粒度越小，系统灵活性和可维护性越高
	2.提高了系统的内聚性，降低系统的耦合度
	3.合理定义接口力度，可以保证系统的稳定性
	4.接口之间可以使用继承关系，实现对总接口的定义
	5.减少项目逇冗余代码，过大的接口对一些不需要的接口，会造成冗余代码
	
	实现方法：
	
6.迪米特法则：
	只与你的直接朋友交谈，不跟“陌生人”说话
	如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。
	
	朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法
	
	优点：
	限制软件实体之间通讯的宽度和深度
	1.实现了模块之间的隔离，降低类之间的耦合度
	
	实现方法：
	从迪米特法则的定义和特点可知，它强调以下两点：
	1.依赖者的角度，只依赖应该依赖的对象
	2.从被依赖的角度，只暴露应该暴露的方法
	
7.合成复用原则
	它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现
	实现方法：
	合成复用原则是通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用。


一句话总结软件设计七大原则：
	面向接口编程，类和方法职责尽量单一，接口不要设计的太大，按需求分接口 ，没有关联关系的类尽量不要直接通讯，使用第三方通讯，可使用组合复用不要使用继承复用

总结：