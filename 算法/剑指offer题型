
1.青蛙跳台阶：
假设
F[n] = 跳上N级台阶
F[n-1] = 跳上N-1级台阶的方法
F[n-2] = 跳上N-2级台阶的方法

可以看出 跳上N级台阶 = 跳上N-1级台阶的方法+跳上N-2级台阶的方法
F[n] = F[n-1]+F[n-2];这个就是斐波那契数列的使用
base：
n=0:f(0) = 1;
n=1:f(1) = 1;
n=2:f(2) = 2;
n=3:f(3) = 3;
n=4:f(4) = 5;

2.股票最大利润

输入: [7,1,5,3,6,4]

动态规划：

状态定义：
dp(n):表示第n天的最大利润
dp(n-1):表示第n-1天的最大利润
dp(n-2):表示第n-2天的最大利润

初始状态:
dp(0)=0;

状态转化：
dp(n) = max(dp(n-1),price[n]-min(price[0..(n-1))])


3.连续子数组的最大和

输入: nums = [-2,1,-3,4,-1,2,1,-5,4]
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。

F(n):n个数组的组合
状态定义：
dp[i]:第i个数组的最大和
dp[i-1]:第i-1个数组的最大和

状态转移：
如果dp[i-1]<=0,则dp[i-1]给最大值产生了负面作用：dp[i] = num[i];
如果dp[i-1]>0,说明dp[i-1]产生了正面作用：dp[i] = dp[i-1]+num[i]

初始状态：
dp[0] = num[0];


4.礼物的最大价值
状态定义：
dp[i][j]:表示第i行第j列路径的最大值
dp[i-1][j]:表示第i-1行第j列路径的最大值
dp[i][j-1]:表示第i行第j-1列路径的最大值
状态转移：
dp[i][j] = max(dp[i-1][j],dp[i][j-1])
状态初始：
dp[0][0]= num[0][0]
dp[0][1]= num[0][1]
dp[1][0]= num[1][0]

代码：
for(i=0;i<line;i++){
	dp[0][0] = num[0][0];
	for(j=0;j<row;j++){
		if(i==0&&j==0)continue;
		if(i=0) dp[i][j]+=num[i][j-1]
		if(j=0) dp[i][j]+=num[i-1][j];
		else{
			dp[i][j] = max(dp[i-1][j],dp[i][j-1])
		}		
	}
}


5.把数字翻译为字符串
给定一个数字，我们按照如下规则把它翻译为字符串：
0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。
一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。

输入: 12258
输出: 5
解释: 12258有5种不同的翻译，分别是"bccfi", "bwfi", "bczi", "mcfi"和"mzi"









