时间复杂度 :https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/r81qpe/
O:代表最差情况
Ω:最佳情况
Θ：平均情况

根据从小到大排列，常见的算法时间复杂度主要有：
O(1)<O(logN)<O(N)<O(NlogN)<O(N^2)<O(2^N)<O(N!) 



空间复杂度
输入空间： 存储输入数据所需的空间大小
暂存空间： 算法运行过程中，存储所有中间变量和对象等数据所需的空间大小
输出空间： 算法运行返回时，存储输出数据所需的空间大小；

指令空间：编译后，程序指令所使用的内存空间。
数据空间：算法中的各项变量使用的空间，包括：声明的常量、变量、动态数组、动态对象等使用的内存空间。
栈帧空间：程序调用函数是基于栈实现的，函数在调用期间，占用常量大小的栈帧空间，直至返回后释放。如以下代码所示，在循环中调用函数，每轮调用 test() 返回后，栈帧空间已被释放，因此空间复杂度仍为 O(1)O(1) 

根据从小到大排列，常见的算法空间复杂度有
O(1)<O(logN)<O(N)<O(N^2)<O(2^N)

时空权衡
对于算法的性能，需要从时间和空间的使用情况来综合评价。优良的算法应具备两个特性，即时间和空间复杂度皆较低。
而实际上，对于某个算法问题，同时优化时间复杂度和空间复杂度是非常困难的。
降低时间复杂度，往往是以提升空间复杂度为代价的，反之亦然。

由于当代计算机的内存充足，通常情况下，算法设计中一般会采取「空间换时间」的做法，即牺牲部分计算机存储空间，来提升算法的运行速度。

算法1：求和
给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标
使用暴力枚举和使用map键值对暂存



