## 前言
前面一篇文章我们封装了一个网络请求类库，用作组件开发中网络请求的使用。
https://juejin.cn/post/7120130046722834440
今天我们来封装一个网络请求加载库lib_image_loader用于我们组件化开发中的图片加载框架。

本系列要实现的组件化框架项目架构如下：


老规矩：按三步走

1.需求分析
2.技术选型
3.根据2中选择的类库进行封装

1.需求分析
1.首先他是一个图片加载库：那就要考虑到我们需要加载哪些种类的图片？png，jpg？gif？webp？balabala。。
2.具体到我们项目中：最常见的对ImageView设置src？对View或者ViewGroup设置背景色。？对目标对象设置图片，设置到一个Target中，设置通知栏的图片信息？
3.多张图片可以并发加载
4.图片自适应我们的控件
5.api使用简单，侵入性低。

2.技术选型
有了第一步的技术分析：
我们选择合适的类库进行封装？
一般图片加载库，有Glide，Fresco，Picasso，而Glide是Picasso一种升级版本，可以只看Glide就可以，
为了选择合适的类库，本人去Glide和Fresco官网查看了下他们的优缺点，Fresco最大的优点是在5.0以下机型，将Bitmap的字节数组放在一个特殊的位置，
而不占用堆中的资源，这样就可以避免OOM的发生，但是目前5.0以下的设备占比已经很少了，所以这个优点可以忽略不计。
其他方面也基本能满足我们的需求，都支持gif和webp格式的图片数据，
但是Glide相比较Fresco来说，api使用简单，对业务代码没有侵入性，而Fresco需要使用他的特定控件才能使用，且需要在application中做初始化操作，有一定的侵入性

基于以上几点，笔者考虑使用Glide来封装我们的类库。
如果有想自己开发一套更加原生的图片加载库的同学，可以参考这篇文章：
https://juejin.cn/post/7120459653682561060

但是不推荐大家去重复造轮子，没必要，但是你必须了解其内部原理。
3.封装
有了前两个步骤，我们就可以开始我们的类库封装了。
我们要封装哪些东西呢？还是根据我们的需求来
1.对ImageView设置src
2.对View或者ViewGroup设置背景色
3.对目标对象设置图片，设置到一个Target中或者说是直接回调一个Bitmap给上层
4.设置通知栏的图片信息
5.显示圆角图片


基于以上几点笔者做了以下封装
public void displayImageForView(ImageView imageView, String url,CustomRequestListener requestListener) {






