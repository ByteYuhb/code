Activity面试题

1.Activity的启动流程有了解么？
	参考：Activity-->startActivity启动流程
	其中包括根Activity和普通Activity启动的分析
2.onSaveInstanceState(),onRestoreInstanceState的调用时机
	2.1：onSaveInstanceState(Bundle outState)会在以下情况被调用：
		2.1.1：从最近应用中选择运行其他的程序时。
		2.1.2：当用户按下HOME键时。
		2.1.3：屏幕方向切换时(无论竖屏切横屏还是横屏切竖屏都会调用)。
		2.1.4：Activity被系统异常销毁或回收等情况
	onPause -> onSaveInstanceState -> onStop。
	2.2：onRestoreInstanceState(Bundle outState)会在以下情况被调用：
		onRestoreInstanceState(Bundle savedInstanceState)只有在activity确实是被系统回收，重新创建activity的情况下才会被调用
	    2.2.1：屏幕方向切换时，activity生命周期如下：onPause->onSaveInstanceState->onStop->onDestroy->onCreate->onStart->onRestoreInstanceState->onResume
		2.2.2：Activity在后台被回收
	源码：
	点击home键后，系统会调用ActivityThread的performStopActivity，将状态保存在mActivity的信息表中。
	当Activity重启时候，会从mActivities中查询到对应的ActivityClientRecord。
		如果有信息，则调用Activity的onResoreInstanceState方法，
		在ActivityThread的performLaunchActivity方法中，系统会判断ActivityClientRecord对象的state是否为空，不为空则通过Activity的onSaveInstanceState获取其UI状态信息，通过这些信息传递给Activity的onCreate方法
3.activity的启动模式和使用场景
	3.1：android任务栈：类TaskRecord：一个TaskRecord中包含一组ActivityRecord的集合，每个ActivityRecord只属于一个任务栈
	3.2：ActivityRecord：一个ActivityRecord表示一个Activity的实例所有的信息
	3.3：ActivityStack：是一个TaskRecord的集合，内部包含N个TaskRecord：主要是包括HomeStack(Launcher任务栈)和FocusStack(应用任务栈)
	启动模式：
	1:standard:标准启动模式：默认启动模式，每次新建一个Activity都会创建一个ActivityRecord
		场景：邮件 默认模式
	2:singleTop：如果需要启动的Activity已经在任务栈的栈顶，则不会重新创建Activity，而是调用Activity的onNewIntent方法
		场景：登录页面，推送通知栏等
	3:singletask: 如果需要启动的Activity已经在任务栈中，则不会重新创建Activity，而是把该Activity栈上面的其他Activity出栈，然后调用Activity的onNewIntent方法
		场景：主页面,WebView页面、扫一扫页面 电商中：购物界面，确认订单界面，付款界面
	4:singleInstance：启动的Activity放在单独的一个任务栈中，且该任务栈有且只有一个Activity
		场景：系统Launcher、锁屏键、来电显示等系统应用
4.Activity A跳转Activity B，再按返回键，生命周期执行的顺序
	正常情况：
	A调到B：A onPause-> B onCreate-> B onStart-> B onResume-> A onStop
	B到A返回：B onPause-> A onRestart-> A onStart->A onResume -> B onStop->B onDestroy
	下面是特殊情况：
	....B 的启动模式为singleTop：
			则先判断任务栈栈顶是否元素是否和需要启动的是一个类的实例，如果不是，则启动模式和正常情况一样，如果是，则直接回调B onPause -> B onNewIntent->B onResume
	....B 的启动模式为singleTask：
			则先判断任务栈中是否有该Activity的实例，如果已经有，则周期：A->onPause-> B.onNewIntent -> B.onRestart -> B.onStart -> B.onResume -> A.onStop -> A onDestroy
	....B 的启动模式为singleInstance：
			则会新建一个任务栈：所以生命周期：A-onPause->B onCreate->B onRestart-> B onResume->A onStop;
	还有其他很多情况也可以分析下
	
5.横竖屏切换,按home键,按返回键,锁屏与解锁屏幕,跳转透明Activity界面,启动一个 Theme 为 Dialog 的 Activity，弹出Dialog时Activity的生命周期
	5.1:横竖屏切换：
		如果配置了android:configChanges="orientation|keyboardHidden|screenSize"，则不会重新调用Activity的生命周期，而是回调onConfigurationChanged方法。
		如果没有配置android:configChanges或者配置不对，则其生命周期为 onPause->onSaveInstanceState->onStop->onCreate->onStart-onRestoreInstanceState->onResume
	5.2:按home键
		按home键后Activity会置于后台：生命周期：onPause->onSaveInstanceState->onStop->重新启动->onRestart->onStart->onResume
	5.4:按back键：
		onPause->onStop->onDestroy->onCreate->onStart->onResume
	5.5:锁屏：
		只会调用onPause-> 开屏：onResume;
	5.6:弹出Dialog
		直接是通过 WindowManager.addView 显示的（没有经过 AMS），所以不会对生命周期有任何影响。
	5.7:启动theme为DialogActivity,跳转透明Activity
		A.onPause -> B.onCrete -> B.onStart -> B.onResume
		（ Activity 不会回调 onStop，因为只有在 Activity 切到后台不可见才会回调 onStop
6.Activity之间传递数据的方式Intent是否有大小限制，如果传递的数据量偏大，有哪些方案
	6.1：我们先来理解一个intent传输数据的过程：
		A Activity--->binder通讯-->AMS-->binder通讯--> B Activity
	可以看出Activity直接传递数据是通过binder机制传输的，binder机制对应用传递数据有一个大小限制1M-8K，
	这个是MMAP接收数据的缓冲区大小，所以实际应用传递的数据要小余1M-8K，这个是MMAP接收数据的缓冲区大小，所以实际应用传递的数据要小余1M-8K
	因为数据传输还有head和body两部分。
	6.2：MMAP机制：
	服务启动的时候，会调用mmap函数，在内核开辟一块内核缓冲区空间，这块空间指向一个物理内存地址，而在用户空间也对同一块物理内存地址做了映射，
	当有数据来的时候，先放到内核缓冲区，系统会自动将数据映射到物理内存，
	而用户空间因为也做了映射，可以直接使用这块物理内存地址中的数据，这就是binder一次拷贝的机制原理
	6.3：binder本身就不是用来传递大数据，而传递大数据建议使用：实时性要求已经高使用单例类，全局变量等，对数据实时性要求不高的且需要永久性的数据可以放到文件里面或者数据库sqlite，shardPreference等或者等
	6.4：和其他几种ipc通讯方式的比较：
	共享内存：只需要一次拷贝，速度很快，但是对开发者要求比较高，难于控制
	socket或者管道：需要两次拷贝，性能比较低
7.显示启动和隐式启动
	7.1：显示启动：
			设置intent的Compoment
		 隐式启动：
			1.action：intent-filter里面可以有多个，intent中只有一个，只要intent-filter里面有这个action就匹配成功
			2.category：intent-filter里面可以有多个，intent里面也可以有多个，intent里面的category要全部都能在intent-filter里面找到才算匹配成功
			3.data：intent-filter中可以设置多个data，intent中只能设置一个且必须设置 用来传递uri数据，一般传递数据使用putExtra就可以了
8.ANR 的四种场景：
	Service TimeOut: service 未在规定时间执行完成：前台服务 20s，后台 200s
	BroadCastQueue TimeOut: 未在规定时间内未处理完广播：前台广播 10s 内, 后台 60s 内
	ContentProvider TimeOut: publish 在 10s 内没有完成
	Input Dispatching timeout: 5s 内未响应键盘输入、触摸屏幕等事件
	可以看到主线程阻塞并不在ANR的场景里面，只是这个是导致ANR的前提，如果主线程阻塞那就没办法处理其他事件，如果系统再有上面所说几种情况发生就会出现ANR
9.如何控制Activity被第三方访问的权限
	1.设置shardUid，两个应用设置同一个uid可以访问各自的应用文件
	2.设置permission：服务Activity设置一个权限，客户端Activity访问的时候需要带有对应的权限才能访问该Activity，最好的控制方法
	3.设置export为false，可以不让第三方访问自己，默认为false，如果设置了inten-filter，则默认为true，安全性不高
10.Activity的数据是怎么保存的,进程被Kill后,保存的数据怎么恢复的？
	在Activity的onSaveInstanceState方法回调时，put到参数outState（Bundle）里面。outState就是ActivityClientRecord的state。ActivityClientRecord实例，都存放在ActivityThread的mActivities里面，
	Activity变得不可见时（onSaveInstanceState和onStop回调之后），在应用进程这边会通过ActivityTaskManagerService的activityStopped方法，把刚刚在onSaveInstanceState中满载了数据的Bundle对象，
	传到系统服务进程那边！ 然后（在系统服务进程这边），会进一步将这个Bundle对象，赋值到对应ActivityRecord的。
	ActivityRecord存储在一个TaskRecord里面，TaskRecord存储在一个ActivityStack里面。最后在下次启动的时候，通过ActivityStack找到ActivityRecord，最终判断ActivityRecord里面的状态，回调onRestoreInstance方法

	
	

	
	
	