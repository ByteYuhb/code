应用根Activity的启动过程：
	根据之前对startActivity启动流程的分析，在ActivityStackSupervisor.startSpecificActivityLocked(next, true, true);方法中：
	对是否创建进程进行判断：
	如果有创建(针对普通Activity)：则直接调用realStartActivityLocked(activity, app, top == activity, true)，这个就是普通Activity的启动流程
	没有创建(针对根Activity  )：则调用AMS的startProcessLocked：
	
1.要启动一个应用APP，需要先创建一个应用程序进程，这个创建过程是MS给孵化进程发送的创建进程的请求fork
	AMS：
	startProcessLocked：
		//获取要创建的进程的用户uid
		int uid = app.uid;
		//对gid创建和赋值
		if (ArrayUtils.isEmpty(permGids)) {
			gids = new int[3];
		} else {
			gids = new int[permGids.length + 3];
			System.arraycopy(permGids, 0, gids, 3, permGids.length);
		}
		gids[0] = UserHandle.getSharedAppGid(UserHandle.getAppId(uid));
		gids[1] = UserHandle.getCacheAppGid(UserHandle.getAppId(uid));
		gids[2] = UserHandle.getUserGid(UserHandle.getUserId(uid));
		//设置待启动的类名
		if (entryPoint == null) entryPoint = "android.app.ActivityThread";
		//启动进程
		startResult = Process.start(entryPoint,...)
			zygoteProcess.start(processClass...)
				startViaZygote(processClass...)
					zygoteSendArgsAndGetResult(openZygoteSocketIfNeeded(abi), argsForZygote);
						分析1：openZygoteSocketIfNeeded：//如果没有打开孵化进程的socket通讯，那就尝试打开，如果已经打开，那就什么都不做，可能会阻塞并多次尝试连接
									primaryZygoteState = ZygoteState.connect(mSocket);//与孵化进程建立连接
										zygoteSocket.connect(new LocalSocketAddress(socketAddress,LocalSocketAddress.Namespace.RESERVED));//连接
											zygoteInputStream = new DataInputStream(zygoteSocket.getInputStream());//获取InputStream
											zygoteWriter = new BufferedWriter(new OutputStreamWriter(zygoteSocket.getOutputStream()), 256);//获取OutPutStream
											return new ZygoteState(zygoteSocket, zygoteInputStream, zygoteWriter..)//返回一个ZygoteState里面包含了输入和输出流
						分析2：zygoteSendArgsAndGetResult(new ZygoteState(zygoteSocket, zygoteInputStream, zygoteWriter..),args)
									writer.write(Integer.toString(args.size()));//给socket写数据
									result.pid = inputStream.readInt();//从socket中读数据
									result.usingWrapper = inputStream.readBoolean();
									return result; result = Process.ProcessStartResult();//此处已经表明应用进程启动成功
									//之后会从fork处启动应用程序进程：进程类为："android.app.ActivityThread" 方法为main，这个时候就正式进入应用程序的main方法中
									
		
2.android.app.ActivityThread   main方法	
	ActivityThread.main{
		ActivityThread thread = new ActivityThread();
        thread.attach(false);
			//调用AMS的attachApplication
			mgr.attachApplication(mAppThread);
				attachApplicationLocked(thread, callingPid);
					//获取之前创建的ProcessRecord
					app = mPidsSelfLocked.get(pid);
					//回调到ActivityThread的ApplicationThread中
					thread.bindApplication(processName, appInfo, providers...)
					//1.包含创建Application，调用application的onCreate方法等
					mStackSupervisor.attachApplicationLocked(app)
						//内部又调用到了realStartActivityLocked方法，这个方法之前分析过就是启动Activity的方式
						realStartActivityLocked(hr, app, true, true)
	
	}

总结：根Activity是在调用realStartActivityLocked真正启动Activity之前，判断进程是否存在，如果存在，则直接调用realStartActivityLocked
如果不存在则会调用startProcessLocked方法去创建应用进程，进程创建成功后，会启动ActivityThread的main方法
这个方法内部调用了attach方法，这个方法调用到AMS的内部，获取内部的ProcessRecord，通过bindApplication通知应用进程发起应用的创建createApplication，创建后回到AMS，AMS
调用realStartActivityLocked这里才是真正的根Activity启动的地方

根Activity创建的过程中涉及的进程
	Launcher进程桌面点击icon
	---->AMS启动Activity前发现应用进程未启动
	--->调用zygote进程创建进程socket通讯
	--->创建成功后，应用进程启动
	--->应用启动成功后,调用AMS的启动Activity方法
	--->最后通知应用进程回调Activity的创建和生命周期方法

