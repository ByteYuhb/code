应用进程的启动过程：

1.要启动一个应用APP，需要先创建一个应用程序进程，这个创建过程是AMS给孵化进程发送的创建进程的请求fork
	AMS：
	startProcessLocked：
		int uid = app.uid;获取要创建的进程的用户uid
		对gid创建和赋值
		if (ArrayUtils.isEmpty(permGids)) {
			gids = new int[3];
		} else {
			gids = new int[permGids.length + 3];
			System.arraycopy(permGids, 0, gids, 3, permGids.length);
		}
		gids[0] = UserHandle.getSharedAppGid(UserHandle.getAppId(uid));
		gids[1] = UserHandle.getCacheAppGid(UserHandle.getAppId(uid));
		gids[2] = UserHandle.getUserGid(UserHandle.getUserId(uid));
		if (entryPoint == null) entryPoint = "android.app.ActivityThread";设置待启动的类名
		startResult = Process.start(entryPoint,...)启动进程
			zygoteProcess.start(processClass...)
				startViaZygote(processClass...)
					zygoteSendArgsAndGetResult(openZygoteSocketIfNeeded(abi), argsForZygote);
						分析1：openZygoteSocketIfNeeded：如果没有打开孵化进程的socket通讯，那就尝试打开，如果已经打开，那就什么都不做，可能会阻塞并多次尝试连接
									primaryZygoteState = ZygoteState.connect(mSocket);与孵化进程建立连接
										zygoteSocket.connect(new LocalSocketAddress(socketAddress,LocalSocketAddress.Namespace.RESERVED));连接
											zygoteInputStream = new DataInputStream(zygoteSocket.getInputStream());获取InputStream
											zygoteWriter = new BufferedWriter(new OutputStreamWriter(zygoteSocket.getOutputStream()), 256);获取OutPutStream
											return new ZygoteState(zygoteSocket, zygoteInputStream, zygoteWriter..)返回一个ZygoteState里面包含了输入和输出流
						分析2：zygoteSendArgsAndGetResult(new ZygoteState(zygoteSocket, zygoteInputStream, zygoteWriter..),args)
									writer.write(Integer.toString(args.size()));给socket写数据
									result.pid = inputStream.readInt();从socket中读数据
									result.usingWrapper = inputStream.readBoolean();
									return result; result = Process.ProcessStartResult();此处已经表明应用进程启动成功
									之后会从fork处启动应用程序进程：进程类为："android.app.ActivityThread" 方法为main，这个时候就正式进入应用程序的main方法中
									
		
2.android.app.ActivityThread   main方法
	
									
				
	