创建窗口：
1.GLFW：GLFW是一个专门针对OpenGL的C语言库，它提供了一些渲染物体所需的最低限度的接口。它允许用户创建OpenGL上下文，定义窗口参数以及处理用户输入，这正是我们需要的。
构建GLFW：https://www.glfw.org/download.html

2.CMake：生成vs项目文件

	我们的第一个工程
	1.链接：将GLFW库和include头文件包含到ide中
	2.
2.GLAD：因为OpenGL只是一个标准/规范，具体的实现是由驱动开发商针对特定显卡实现的。
	由于OpenGL驱动版本众多，它大多数函数的位置都无法在编译时确定下来，需要在运行时查询。所以任务就落在了开发者身上，开
	发者需要在运行时获取函数地址并将其保存在一个函数指针中供以后使用。取得地址的方法因平台而异，在Windows上会是类似这样：
		// 定义函数原型
		typedef void (*GL_GENBUFFERS) (GLsizei, GLuint*);
		// 找到正确的函数并赋值给函数指针
		GL_GENBUFFERS glGenBuffers  = (GL_GENBUFFERS)wglGetProcAddress("glGenBuffers");
		// 现在函数可以被正常调用了
		GLuint buffer;
		glGenBuffers(1, &buffer);
	你可以看到代码非常复杂，而且很繁琐，我们需要对每个可能使用的函数都要重复这个过程。幸运的是，有些库能简化此过程，其中GLAD是目前最新，也是最流行的库。
	1.配置GLAD

环境搭好后：可以开始第一个工程啦：
	1.实例化GLFW窗口
		int main()
		{
			glfwInit();
			glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
			glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
			glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
			//glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);

			return 0;
		}
	2.创建一个窗口对象
		GLFWwindow* window = glfwCreateWindow(800, 600, "LearnOpenGL", NULL, NULL);
		if (window == NULL)
		{
			std::cout << "Failed to create GLFW window" << std::endl;
			glfwTerminate();
			return -1;
		}
		glfwMakeContextCurrent(window);
	3.在之前的教程中已经提到过，GLAD是用来管理OpenGL的函数指针的，所以在调用任何OpenGL的函数之前我们需要初始化GLAD。
		if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
		{
			std::cout << "Failed to initialize GLAD" << std::endl;
			return -1;
		}
		我们给GLAD传入了用来加载系统相关的OpenGL函数指针地址的函数。GLFW给我们的是glfwGetProcAddress，它根据我们编译的系统定义了正确的函数。
	4.在我们开始渲染之前还有一件重要的事情要做，我们必须告诉OpenGL渲染窗口的尺寸大小，即视口(Viewport)
		glViewport(0, 0, 800, 600);
	5.当用户改变窗口的大小的时候，视口也应该被调整。我们可以对窗口注册一个回调函数(Callback Function)，它会在每次窗口大小被调整的时候被调用
		void framebuffer_size_callback(GLFWwindow* window, int width, int height)
		{
			glViewport(0, 0, width, height);
		}
		glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);
	6.我们希望程序在我们主动关闭它之前不断绘制图像并能够接受用户输入。因此，我们需要在程序中添加一个while循环，我们可以把它称之为渲染循环(Render Loop)，它能在我们让GLFW退出前一直保持运行
		while(!glfwWindowShouldClose(window))
		{
			glfwSwapBuffers(window);
			glfwPollEvents();    
		}
		1.glfwWindowShouldClose函数在我们每次循环的开始前检查一次GLFW是否被要求退出，如果是的话该函数返回true然后渲染循环便结束了，之后为我们就可以关闭应用程序了。
		2.glfwPollEvents函数检查有没有触发什么事件（比如键盘输入、鼠标移动等）、更新窗口状态，并调用对应的回调函数（可以通过回调方法手动设置）。
		3.glfwSwapBuffers函数会交换颜色缓冲（它是一个储存着GLFW窗口每一个像素颜色值的大缓冲），它在这一迭代中被用来绘制，并且将会作为输出显示在屏幕上
	7.正确释放/删除之前的分配的所有资源
		glfwTerminate();
	8.注册输入事件
		void processInput(GLFWwindow *window)
		{
			if(glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
				glfwSetWindowShouldClose(window, true);
		}
		while (!glfwWindowShouldClose(window))
		{
			processInput(window);

			glfwSwapBuffers(window);
			glfwPollEvents();
		}
	9.我们要把所有的渲染(Rendering)操作放到渲染循环中，因为我们想让这些渲染指令在每次渲染循环迭代的时候都能被执行
		// 渲染循环
		while(!glfwWindowShouldClose(window))
		{
			// 输入
			processInput(window);

			// 渲染指令
			...

			// 检查并调用事件，交换缓冲
			glfwPollEvents();
			glfwSwapBuffers(window);
		}
	10.为了测试一切都正常工作，我们使用一个自定义的颜色清空屏幕
		glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT);
		注意，除了glClear之外，我们还调用了glClearColor来设置清空屏幕所用的颜色。
		当调用glClear函数，清除颜色缓冲之后，整个颜色缓冲都会被填充为glClearColor里所设置的颜色。在这里，我们将屏幕设置为了类似黑板的深蓝绿色。
	11.