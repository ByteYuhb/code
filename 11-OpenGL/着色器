着色器：
语言：GLSL：
1.简介：
	GLSL是为图形计算量身定制的，它包含一些针对向量和矩阵操作的有用特性。
	着色器的开头总是要声明版本，接着是输入和输出变量、uniform和main函数。每个着色器的入口点都是main函数，
	在这个函数中我们处理所有的输入变量，并将结果输出到输出变量中。如果你不知道什么是uniform也不用担心，我们后面会进行讲解。
	一个典型的着色器有下面的结构：
		#version version_number
		in type in_variable_name;
		in type in_variable_name;

		out type out_variable_name;

		uniform type uniform_name;

		int main()
		{
		  // 处理输入并进行一些图形操作
		  ...
		  // 输出处理过的结果到输出变量
		  out_variable_name = weird_stuff_we_processed;
		}
2.当我们特别谈论到顶点着色器的时候，每个输入变量也叫顶点属性(Vertex Attribute)。我们能声明的顶点属性是有上限的，
	它一般由硬件来决定。OpenGL确保至少有16个包含4分量的顶点属性可用，但是有些硬件或许允许更多的顶点属性，你可以查询GL_MAX_VERTEX_ATTRIBS来获取具体的上限：通常情况下它至少会返回16个，大部分情况下是够用了。
	int nrAttributes;
	glGetIntegerv(GL_MAX_VERTEX_ATTRIBS, &nrAttributes);
	std::cout << "Maximum nr of vertex attributes supported: " << nrAttributes << std::endl;
3.数据类型
	和其他编程语言一样，GLSL有数据类型可以来指定变量的种类。GLSL中包含C等其它语言大部分的默认基础数据类型：int、float、double、uint和bool。
	GLSL也有两种容器类型，它们会在这个教程中使用很多，分别是向量(Vector)和矩阵(Matrix)
	1.向量：
		1.GLSL中的向量是一个可以包含有1、2、3或者4个分量的容器，分量的类型可以是前面默认基础类型的任意一个。它们可以是下面的形式（n代表分量的数量）：
		 1.vecn	包含n个float分量的默认向量
		 2.bvecn	包含n个bool分量的向量
		 3.ivecn	包含n个int分量的向量
		 4.uvecn	包含n个unsigned int分量的向量
		 5.dvecn	包含n个double分量的向量
		大多数时候我们使用vecn，因为float足够满足大多数要求了。
		2.一个向量的分量可以通过vec.x这种方式获取，这里x是指这个向量的第一个分量。
			你可以分别使用.x、.y、.z和.w来获取它们的第1、2、3、4个分量。GLSL也允许你对颜色使用rgba，或是对纹理坐标使用stpq访问相同的分量。
		3.向量这一数据类型也允许一些有趣而灵活的分量选择方式，叫做重组(Swizzling)。重组允许这样的语法：
				vec2 someVec;
				vec4 differentVec = someVec.xyxx;
				vec3 anotherVec = differentVec.zyw;
				vec4 otherVec = someVec.xxxx + anotherVec.yxzy;
			你可以使用上面4个字母任意组合来创建一个和原来向量一样长的（同类型）新向量，只要原来向量有那些分量即可；
			然而，你不允许在一个vec2向量中去获取.z元素。我们也可以把一个向量作为一个参数传给不同的向量构造函数，以减少需求参数的数量：
				vec2 vect = vec2(0.5, 0.7);
				vec4 result = vec4(vect, 0.0, 0.0);
				vec4 otherResult = vec4(result.xyz, 1.0);
			向量是一种灵活的数据类型，我们可以把用在各种输入和输出上。学完教程你会看到很多新颖的管理向量的例子。
4.输入与输出
	GLSL定义了in和out关键字专门来表示输入和输出
	每个着色器使用这两个关键字设定输入和输出，只要一个输出变量与下一个着色器阶段的输入匹配，它就会传递下去。
	但在顶点和片段着色器中会有点不同。
	
	顶点着色器输入输出：
		顶点着色器应该接收的是一种特殊形式的输入，否则就会效率低下。顶点着色器的输入特殊在，
		它从顶点数据中直接接收输入。为了定义顶点数据该如何管理，我们使用location这一元数据指定输入变量
		这样我们才可以在CPU上配置顶点属性。我们已经在前面的教程看过这个了，layout (location = 0)。
		顶点着色器需要为它的输入提供一个额外的layout标识，这样我们才能把它链接到顶点数据。
	片段着色器输入输出：
		它需要一个vec4颜色输出变量，因为片段着色器需要生成一个最终输出的颜色。如果你在片段着色器没有定义输出颜色，OpenGL会把你的物体渲染为黑色（或白色）。
		所以，如果我们打算从一个着色器向另一个着色器发送数据，我们必须在发送方着色器中声明一个输出，在接收方着色器中声明一个类似的输入。当类型和名字都一样的时候，OpenGL就会把两个变量链接到一起，它们之间就能发送数据了（这是在链接程序对象时完成的）。
		为了展示这是如何工作的，我们会稍微改动一下之前教程里的那个着色器，让顶点着色器为片段着色器决定颜色。
		顶点着色器中：
			#version 330 core
			layout (location = 0) in vec3 aPos; // 位置变量的属性位置值为0

			out vec4 vertexColor; // 为片段着色器指定一个颜色输出

			void main()
			{
				gl_Position = vec4(aPos, 1.0); // 注意我们如何把一个vec3作为vec4的构造器的参数
				vertexColor = vec4(0.5, 0.0, 0.0, 1.0); // 把输出变量设置为暗红色
			}
		片段着色器：
			#version 330 core
			out vec4 FragColor;

			in vec4 vertexColor; // 从顶点着色器传来的输入变量（名称相同、类型相同）

			void main()
			{
				FragColor = vertexColor;
			}
		你可以看到我们在顶点着色器中声明了一个vertexColor变量作为vec4输出，并在片段着色器中声明了一个类似的vertexColor。
		由于它们名字相同且类型相同，片段着色器中的vertexColor就和顶点着色器中的vertexColor链接了。
		由于我们在顶点着色器中将颜色设置为深红色，最终的片段也是深红色的

5.Uniform
	Uniform是一种从CPU中的应用向GPU中的着色器发送数据的方式，但uniform和顶点属性有些不同。
	1.首先，uniform是全局的(Global)。全局意味着uniform变量必须在每个着色器程序对象中都是独一无二的，而且它可以被着色器程序的任意着色器在任意阶段访问。
	2.第二，无论你把uniform值设置成什么，uniform会一直保存它们的数据，直到它们被重置或更新。
		我们来看看这次是否能通过uniform设置三角形的颜色：
		#version 330 core
		out vec4 FragColor;

		uniform vec4 ourColor; // 在OpenGL程序代码中设定这个变量

		void main()
		{
			FragColor = ourColor;
		}
	3.这个uniform现在还是空的；我们还没有给它添加任何数据，所以下面我们就做这件事。我们首先需要找到着色器中uniform属性的索引/位置值。
		当我们得到uniform的索引/位置值后，我们就可以更新它的值了。这次我们不去给像素传递单独一个颜色，而是让它随着时间改变颜色：
		float timeValue = glfwGetTime();
		float greenValue = (sin(timeValue) / 2.0f) + 0.5f;
		int vertexColorLocation = glGetUniformLocation(shaderProgram, "ourColor");
		glUseProgram(shaderProgram);
		glUniform4f(vertexColorLocation, 0.0f, greenValue, 0.0f, 1.0f);
	4.渲染循环：
		while(!glfwWindowShouldClose(window))
		{
			// 输入
			processInput(window);

			// 渲染
			// 清除颜色缓冲
			glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
			glClear(GL_COLOR_BUFFER_BIT);

			// 记得激活着色器
			glUseProgram(shaderProgram);

			// 更新uniform颜色
			float timeValue = glfwGetTime();
			float greenValue = sin(timeValue) / 2.0f + 0.5f;
			int vertexColorLocation = glGetUniformLocation(shaderProgram, "ourColor");
			glUniform4f(vertexColorLocation, 0.0f, greenValue, 0.0f, 1.0f);

			// 绘制三角形
			glBindVertexArray(VAO);
			glDrawArrays(GL_TRIANGLES, 0, 3);

			// 交换缓冲并查询IO事件
			glfwSwapBuffers(window);
			glfwPollEvents();
		}
	5.可以看到，uniform对于设置一个在渲染迭代中会改变的属性是一个非常有用的工具，它也是一个在程序和着色器间数据交互的很好工具，
	但假如我们打算为每个顶点设置一个颜色的时候该怎么办？
	这种情况下，我们就不得不声明和顶点数目一样多的uniform了。在这一问题上更好的解决方案是在顶点属性中包含更多的数据，这是我们接下来要做的事情	
6.更多属性！
	在前面的教程中，我们了解了如何填充VBO、配置顶点属性指针以及如何把它们都储存到一个VAO里。
	1.这次，我们同样打算把颜色数据加进顶点数据中。我们将把颜色数据添加为3个float值至vertices数组。我们将把三角形的三个角分别指定为红色、绿色和蓝色：
		float vertices[] = {
			// 位置              // 颜色
			 0.5f, -0.5f, 0.0f,  1.0f, 0.0f, 0.0f,   // 右下
			-0.5f, -0.5f, 0.0f,  0.0f, 1.0f, 0.0f,   // 左下
			 0.0f,  0.5f, 0.0f,  0.0f, 0.0f, 1.0f    // 顶部
		};
	2.由于现在有更多的数据要发送到顶点着色器，我们有必要去调整一下顶点着色器，
	  使它能够接收颜色值作为一个顶点属性输入。需要注意的是我们用layout标识符来把aColor属性的位置值设置为1：
		#version 330 core
		layout (location = 0) in vec3 aPos;   // 位置变量的属性位置值为 0 
		layout (location = 1) in vec3 aColor; // 颜色变量的属性位置值为 1

		out vec3 ourColor; // 向片段着色器输出一个颜色

		void main()
		{
			gl_Position = vec4(aPos, 1.0);
			ourColor = aColor; // 将ourColor设置为我们从顶点数据那里得到的输入颜色
		}
	3.由于我们不再使用uniform来传递片段的颜色了，现在使用ourColor输出变量，我们必须再修改一下片段着色器：
		#version 330 core
		out vec4 FragColor;  
		in vec3 ourColor;

		void main()
		{
			FragColor = vec4(ourColor, 1.0);
		}
	4.因为我们添加了另一个顶点属性，并且更新了VBO的内存，我们就必须重新配置顶点属性指针。更新后的VBO内存中的数据现在看起来像这样：
		XYZRGB XYZRGB XYZRGB
	5.知道了现在使用的布局，我们就可以使用glVertexAttribPointer函数更新顶点格式，
		// 位置属性
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);
		glEnableVertexAttribArray(0);
		// 颜色属性
		glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3* sizeof(float)));
		glEnableVertexAttribArray(1);
		和正常一个向量表示有两个区别：
			1.第五个参数变成了6 * sizeof(float)，这是因为我们现在一个顶点数据为6个float长，3个位置值，三个颜色值，步长就为6了
			2.第6个参数颜色属性变为3* sizeof(float)，这是因为颜色相对buffer首地址偏移了3个float长度值
	
		