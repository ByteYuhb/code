WebView使用详解：
	
1.首先来了解下WebView的状态：
	webView.onResume://激活WebView为活跃状态，能正常执行网页的响应
	
	webView.onPause()；//当页面被失去焦点被切换到后台不可见状态，需要执行onPause//通过onPause动作通知内核暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行。
	
	//当应用程序(存在webview)被切换到后台时，这个方法不仅仅针对当前的webview而是全局的全应用程序的webview
	//它会暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。
	webView.pauseTimers()
	
	//恢复pauseTimers状态
	webView.resumeTimers()；
	
	//销毁Webview
	//在关闭了Activity时，如果Webview的音乐或视频，还在播放。就必须销毁Webview
	//但是注意：webview调用destory时,webview仍绑定在Activity上
	//这是由于自定义webview构建时传入了该Activity的context对象
	//因此需要先从父容器中移除webview,然后再销毁webview:
	rootLayout.removeView(webView); 
	webView.destroy();
2.关于前进 / 后退网页
	webView.canGoBack();是否可以后退
	webView.goBack();后退
	webView.canGoForward();是否可以前进
	webView.goForward();前进
	webView.canGoBackOrForward(1);//正数为前进forward，负数为后退back
	常见用法：back键控制网页回退
	问题：一般情况下如果没有对回退键做处理的情况下，点击回退键会结束整个Activity
	目标：按回退键，回退网页页面
	解决方案：在onKeyDown方法中检测是否是最后一个网页，如果不是，则消费该事件
	具体代码：
		public boolean onKeyDown(int keyCode, KeyEvent event) {
			if ((keyCode == KEYCODE_BACK) && mWebView.canGoBack()) { 
				mWebView.goBack();
				return true;
			}
			return super.onKeyDown(keyCode, event);
		}

3.清除缓存数据
	webView.clearCache(true);清除内核上的缓存，因为内核缓存是全局的，所以这个方法会将这个应用程序的缓存都清除掉，参数为true表示清除包括sd卡上的缓存
	webView.clearHistory();清除当前webView的访问历史记录，除了当前记录
	webView.clearFormData();清除自动填充的表单数据，不会清除存储到本地的数据

4.常用类：
	1.WebSetting：对WebView进行配置和管理
		配置步骤：
			1.添加访问权限：<uses-permission android:name="android.permission.INTERNET"/>
			2.生成一个WebView组件：
				WebView webView = new WebView(this);或者在xml中配置
			3.获取WebSetting对象实例并进行配置
				WebSetting webSetting = webView.getSettings();
				webSetting.setJavaScriptEnabled(true):设置是否可以和js交互
				
				设置自适应屏幕，需要两者合用
				webSettings.setUseWideViewPort(true);将图片调整到适合webview大小
				setLoadWithOverviewMode(boolean overview);// 缩放至屏幕的大小
				
				webSetting.setSupportZoom(true):设置是否支持缩放，是下面设置的前提
				webSettings.setBuiltInZoomControls(true);设置内嵌的缩放控件，如果false则webview不可以缩放
				
				其他细节：
				webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //关闭webview中缓存
				webSettings.setAllowFileAccess(true); //设置可以访问文件 
				webSettings.setJavaScriptCanOpenWindowsAutomatically(true); //支持通过JS打开新窗口
				webSettings.setLoadsImagesAutomatically(true); //支持自动加载图片
				webSettings.setDefaultTextEncodingName("utf-8");//设置编码格式
		常见用法：
			1.设置WebView缓存：
				当加载 html 页面时，WebView会在/data/data/包名目录下生成 database 与 cache 两个文件夹；
				请求的 URL记录保存在 WebViewCache.db，而 URL的内容是保存在 WebViewCache 文件夹下
				1.1：是否启用缓存：
					缓存模式：
						LOAD_CACHE_ONLY: 不使用网络，只读取本地缓存数据
						LOAD_DEFAULT: （默认）根据cache-control决定是否从网络上取数据
						LOAD_NO_CACHE: 不使用缓存，只从网络获取数据.
						LOAD_CACHE_ELSE_NETWORK，只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。
					//优先使用缓存: 
					WebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
					//不使用缓存: 
					WebView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);
				1.2：结合使用（离线加载）
					if (NetStatusUtil.isConnected(getApplicationContext())) {
						webSettings.setCacheMode(WebSettings.LOAD_DEFAULT);//根据cache-control决定是否从网络上取数据。
					} else {
						webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);//没网，则从本地获取，即离线加载
					}

					webSettings.setDomStorageEnabled(true); // 开启 DOM storage API 功能
					webSettings.setDatabaseEnabled(true);   //开启 database storage API 功能
					webSettings.setAppCacheEnabled(true);//开启 Application Caches 功能

					String cacheDirPath = getFilesDir().getAbsolutePath() + APP_CACAHE_DIRNAME;
					webSettings.setAppCachePath(cacheDirPath); //设置  Application Caches 缓存目录

				注意： 每个 Application 只调用一次 WebSettings.setAppCachePath()，WebSettings.setAppCacheMaxSize()
			
	2.WebViewClient类
		作用：处理各种通知 & 请求事件
		常见方法：
			常见方法1：shouldOverrideUrlLoading()
				作用：打开网页时不调用系统浏览器， 而是在本WebView中显示；在网页上的所有加载都经过这个方法,这个函数我们可以做很多操作。
						//步骤1. 定义Webview组件
						Webview webview = (WebView) findViewById(R.id.webView1);

						//步骤2. 选择加载方式
						  //方式1. 加载一个网页：
						  webView.loadUrl("http://www.google.com/");

						  //方式2：加载apk包中的html页面
						  webView.loadUrl("file:///android_asset/test.html");

						  //方式3：加载手机本地的html页面
						   webView.loadUrl("content://com.android.htmlfileprovider/sdcard/test.html");

						//步骤3. 复写shouldOverrideUrlLoading()方法，使得打开网页时不调用系统浏览器， 而是在本WebView中显示
							webView.setWebViewClient(new WebViewClient(){
							  @Override
							  public boolean shouldOverrideUrlLoading(WebView view, String url) {
								  view.loadUrl(url);这里可以拦截访问的url
							  return true;
							  }
						  });
			常见方法2：onPageStarted()
				作用：开始载入页面调用的，我们可以设定一个loading的页面，告诉用户程序在等待网络响应
						 webView.setWebViewClient(new WebViewClient(){
							  @Override
							  public void  onPageStarted(WebView view, String url, Bitmap favicon) {
								 //设定加载开始的操作
							  }
						  });
			常见方法3：onPageFinished()
				作用：在页面加载结束时调用。我们可以关闭loading 条，切换程序动作
						    webView.setWebViewClient(new WebViewClient(){
								  @Override
								  public void onPageFinished(WebView view, String url) {
									 //设定加载结束的操作
								  }
							  });
			常见方法4：onLoadResource()
				作用：在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。
							    webView.setWebViewClient(new WebViewClient(){
								  @Override
								  public boolean onLoadResource(WebView view, String url) {
									 //设定加载资源的操作
								  }
							  });
			常见方法5：onReceivedError（）
				作用：加载页面的服务器出现错误时（如404）调用。App里面使用webview控件的时候遇到了诸如404这类的错误的时候，若也显示浏览器里面的那种错误提示页面就显得很丑陋了，那么这个时候我们的app就需要加载一个本地的错误提示页面，即webview如何加载一个本地的页面
							//步骤1：写一个html文件（error_handle.html），用于出错时展示给用户看的提示页面
							//步骤2：将该html文件放置到代码根目录的assets文件夹下

							//步骤3：复写WebViewClient的onRecievedError方法
							//该方法传回了错误码，根据错误类型可以进行不同的错误分类处理
								webView.setWebViewClient(new WebViewClient(){
								  @Override
								  public void onReceivedError(WebView view, int errorCode, String description, String failingUrl){
									switch(errorCode)
													{
													case HttpStatus.SC_NOT_FOUND:
														view.loadUrl("file:///android_assets/error_handle.html");
														break;
													}
												}
											});
			
			常见方法6：onReceivedSslError()
				作用：处理https请求
				webView默认是不处理https请求的，页面显示空白，需要进行如下设置：
					webView.setWebViewClient(new WebViewClient() {    
						@Override    
						public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {    
							handler.proceed();    //表示等待证书响应
						// handler.cancel();      //表示挂起连接，为默认方式
						// handler.handleMessage(null);    //可做其他处理
						}    
					});    
			
			
	3.WebChromeClient类
		作用：辅助 WebView 处理 Javascript 的对话框,网站图标,网站标题等等
		常见使用：
			常见方法1： onProgressChanged（）
				作用：获得网页的加载进度并显示
					webview.setWebChromeClient(new WebChromeClient(){

					  @Override
					  public void onProgressChanged(WebView view, int newProgress) {
						  if (newProgress < 100) {
							  String progress = newProgress + "%";
							  progress.setText(progress);
							} else {
						}
					});
			常见方法2： onReceivedTitle（）
				作用：获取Web页中的标题
					每个网页的页面都有一个标题，比如www.baidu.com这个页面的标题即“百度一下，你就知道”，那么如何知道当前webview正在加载的页面的title并进行设置呢？
						webview.setWebChromeClient(new WebChromeClient(){

						@Override
						public void onReceivedTitle(WebView view, String title) {
						   titleview.setText(title)；
						}

5.WebView与JS的交互
	参考WebView和Js的交互
6.如何避免WebView内存泄露？
	1.不在xml中定义 Webview ，而是在需要的时候在Activity中创建，并且Context使用 getApplicationgContext()
		LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
        mWebView = new WebView(getApplicationContext());
        mWebView.setLayoutParams(params);
        mLayout.addView(mWebView);
	2.在 Activity 销毁（ WebView ）的时候，先让 WebView 加载null内容，然后移除 WebView，再销毁 WebView，最后置空。
		@Override
		protected void onDestroy() {
			if (mWebView != null) {
				mWebView.loadDataWithBaseURL(null, "", "text/html", "utf-8", null);
				mWebView.clearHistory();

				((ViewGroup) mWebView.getParent()).removeView(mWebView);
				mWebView.destroy();
				mWebView = null;
			}
			super.onDestroy();
		}
	




						
				


  

				
				
	

		
	