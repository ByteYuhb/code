AOP：
面向切面编程：横向开发
针对业务处理过程中的一个切面来进行开发
OOP：
面向对象编程：纵向开发

一般开发可以：AOP和OOP结合使用，达到模块间的低耦合



比如日志打印系统，
面向对象的方式OOP：
	1.写一个日志打印的类LogUtils;
	2.在需要打印日志的地方，调用这个类的方法;
面向切面的方式AOP：
	1.找出需要打印的地方，这些地方其实就是一个连接点。把所有连接点连起来就是一个切面
	2.对切面使用注解的方式声明这个切面。
	3.使用APT工具在编译器对这些注解统一处理，动态生成一个统一处理的类，并使用字节码茶砖的方式动态修改字节码，在切面上调用打印方法
	
	
	字节码插桩：就是在.class文件转为.dex之前，修改.class文件从而达到修改代码的目的。
		
		业务场景：
		日志记录，性能统计，异常处理，修改第三方库代码
		
		知识储备：
		GradlePlugin相关知识
		了解Transform API
		了解字ASM，Javassist或者其他相关插桩框架
		
Android AOP可以从两方面来谈：
	1.编译期切入
		使用APT工具对java文件中的注解进行统一扫描处理，并使用javapoet工具动态生成java文件。
		如我们的ButterKnife，DataBinding，EventBus3等架构就是基于编译期切入方式的编程，大大简化了开发的工作，让代码耦合度更低。
	2.运行期接入：
		使用动态代理机制Hook进程中的字段，替换字段中的方法等，如滴滴开源的VirtualApk就是使用了这种方式实现插件化。
		使用ASM等等字节码工具
		集成AspectJ框架，通过过Gradle Transform API，在编译期class文件打包为dex文件前，动态修改class文件的内容，达到字节码插庄的目的。
		
	
	

	
	
	