单例模式
	包括懒汉和饿汉模式
	
	懒汉：
	public class LazySingleton {
		private static volatile LazySingleton instance = null;    //保证 instance 在所有线程中同步
		private LazySingleton() {
		}    //private 避免类在外部被实例化
		public static synchronized LazySingleton getInstance() {
			//getInstance 方法前加同步
			if (instance == null) {
				instance = new LazySingleton();
			}
			return instance;
		}
	}
	如果编写的是多线程程序，则不要删除上例代码中的关键字 volatile 和 synchronized，
	否则将存在线程非安全的问题。如果不删除这两个关键字就能保证线程安全，
	但是每次访问时都要同步，会影响性能，且消耗更多的资源，这是懒汉式单例的缺点。

	饿汉：
	public class HungrySingleton {
		private static final HungrySingleton instance = new HungrySingleton();
		private HungrySingleton() {
		}
		public static HungrySingleton getInstance() {
			return instance;
		}
	}

	饿汉式单例在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以是线程安全的，可以直接用于多线程而不会出现问题。
