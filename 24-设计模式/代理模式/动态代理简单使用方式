动态代理模式：
原理：在运行时构建一个class字节码数组，并将其转换成一个运行时的class对象，然后构造其实例

1.介绍：在程序运行时创建的类，运行前不存在的类，对性能有一定开销
2.使用方式：
	1.创建一个Person接口
	interface Person{
		void giveMoney();
	}
	2.创建需要被代理的实际类
	public class Student implements Person {
    private String name;
		public Student(String name) {
			this.name = name;
		}
		
		@Override
		public void giveMoney() {
			try {
			  //假设数钱花了一秒时间
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		   System.out.println(name + "上交班费50元");
		}
	}
	3.再定义一个检测方法执行时间的工具类
	public class MonitorUtil {
    
		private static ThreadLocal<Long> tl = new ThreadLocal<>();
		
		public static void start() {
			tl.set(System.currentTimeMillis());
		}
		
		//结束时打印耗时
		public static void finish(String methodName) {
			long finishTime = System.currentTimeMillis();
			System.out.println(methodName + "方法耗时" + (finishTime - tl.get()) + "ms");
		}
	}
	4.创建StuInvocationHandler类，实现InvocationHandler接口
	public class StuInvocationHandler<T> implements InvocationHandler {
	   //invocationHandler持有的被代理对象
		T target;
		
		public StuInvocationHandler(T target) {
		   this.target = target;
		}
		
		/**
		 * proxy:代表动态代理对象
		 * method：代表正在执行的方法
		 * args：代表调用目标方法时传入的实参
		 */
		@Override
		public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
			System.out.println("代理执行" +method.getName() + "方法");
		 */   
			//代理过程中插入监测方法,计算该方法耗时
			MonitorUtil.start();
			Object result = method.invoke(target, args);
			MonitorUtil.finish(method.getName());
			return result;
		}
	}
	5.具体创建动态代理对象
	public class ProxyTest {
		public static void main(String[] args) {
			
			//创建一个实例对象，这个对象是被代理的对象
			Person zhangsan = new Student("张三");
			
			//创建一个与代理对象相关联的InvocationHandler
			InvocationHandler stuHandler = new StuInvocationHandler<Person>(zhangsan);
			
			//创建一个代理对象stuProxy来代理zhangsan，代理对象的每个执行方法都会替换执行Invocation中的invoke方法
			Person stuProxy = (Person) Proxy.newProxyInstance(Person.class.getClassLoader(), new Class<?>[]{Person.class}, stuHandler)；

		   //代理执行上交班费的方法
			stuProxy.giveMoney();
		}
	}
