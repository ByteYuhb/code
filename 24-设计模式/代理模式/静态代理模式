代理模式：

1.介绍：
	给目标对象提供一个代理对象，并由代理对象控制对目标对象的引用
	1.代理对象：起到中介作用，连接目标对象和客户端
	2.如电脑快捷方式就是连接用户和目标程序的中介也是起个中介作用
2.UML图：https://upload-images.jianshu.io/upload_images/944365-3e4cc2f9c34a64cc.png?imageMogr2/auto-orient/strip|imageView2/2/format/webp

3.使用方式
	场景分析：海外代购
	1.统一接口：
		interface subject{
			buyer();
		}
	2.目标对象：
		class TargetBuyer extends subject{
			buy(){
				System.out.println("buy one mac");
			};
		}
	3.代理对象：
		class ProxyBuyer extends subject{
			buy(){
				new TargetBuyer().buy();
			}
		}
	4.客户端调用：
		new ProxyBuyer.buy();

4.特点
	优点：
	 1.协调调用者和被调用者，降低了系统的耦合度
	 2.代理对象作为客户端和目标对象之间的中介，起到了保护目标对象的作用
	缺点：
	 1.由于在客户端和真实主题之间增加了代理对象，因此会造成请求的处理速度变慢；
	 2.实现代理模式需要额外的工作（有些代理模式的实现非常复杂），从而增加了系统实现的复杂度。
	 
5.应用场景
	1.远程代理：
		描述：为一个对象在不同的地址空间提供局部的代表时
		目的：1.隐藏一个对象存在于不同地址空间的事实 2.远程机器可能有更好的计算机性能和处理速度，可以更快响应并处理客户端请求
	2.虚拟代理：
		描述：通过使用一个小的对象代理开销大的对象
		目的：减少系统开销
	3.保护代理：
		描述：控制目标对象的访问，给不同用户提供不同权限
		目的：控制对目标对象的访问权限
	4.智能引用代理：
		描述：在访问对象时附加额外操作，如计算访问次数，耗时操作等
		目的：在不影响对象类的情况下，在访问时做一些初始化操作等额外操作
	5.其他：
	防火墙代理：保护目标不被恶意攻击
	cache代理：创建临时缓存空间
	